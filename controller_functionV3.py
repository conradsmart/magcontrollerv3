# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'controller.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets 

from PyQt5.QtWidgets import QDialog, QApplication, QMainWindow, QPushButton, QVBoxLayout, QWidget, QDialog, QLabel, QSizePolicy, QDoubleSpinBox
from functools import partial
from pypylon import pylon
from pypylon import genicam
import sys
import cv2
import time
import multiprocessing as mp
import numpy as np
from PyQt5.QtGui import QImage, QPixmap, QValidator, QDoubleValidator
from PyQt5.QtCore import QThread, pyqtSignal, QObject, QEvent, Qt
import atexit
import nidaqmx
from nidaqmx.stream_writers import AnalogMultiChannelWriter, AnalogSingleChannelWriter

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(2227, 1766)
        self.MainWindow = MainWindow
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.widget_9 = QtWidgets.QWidget(self.centralwidget)
        self.widget_9.setMinimumSize(QtCore.QSize(400, 0))
        self.widget_9.setBaseSize(QtCore.QSize(0, 0))
        self.widget_9.setObjectName("widget_9")
        self.verticalLayout_10 = QtWidgets.QVBoxLayout(self.widget_9)
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.plot_label1 = QtWidgets.QLabel(self.widget_9)
        self.plot_label1.setStyleSheet("background-color: rgb(205, 205, 205);")
        self.plot_label1.setObjectName("plot_label1")
        self.verticalLayout.addWidget(self.plot_label1)
        self.plot_label2 = QtWidgets.QLabel(self.widget_9)
        self.plot_label2.setStyleSheet("background-color: rgb(195, 195, 195);")
        self.plot_label2.setObjectName("plot_label2")
        self.verticalLayout.addWidget(self.plot_label2)
        self.plot_label3 = QtWidgets.QLabel(self.widget_9)
        self.plot_label3.setStyleSheet("background-color: rgb(205, 205, 205);")
        self.plot_label3.setObjectName("plot_label3")
        self.verticalLayout.addWidget(self.plot_label3)
        self.verticalLayout_10.addLayout(self.verticalLayout)
        self.gridLayout.addWidget(self.widget_9, 0, 1, 1, 1)
        self.scrollArea = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 1781, 1212))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.scrollAreaWidgetContents)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.video_label = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.video_label.setStyleSheet("\n"
"background-color: rgb(124, 124, 124);")
        self.video_label.setObjectName("video_label")
        self.horizontalLayout.addWidget(self.video_label)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.gridLayout.addWidget(self.scrollArea, 0, 0, 1, 1)
        self.scrollArea_3 = QtWidgets.QScrollArea(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.scrollArea_3.sizePolicy().hasHeightForWidth())
        self.scrollArea_3.setSizePolicy(sizePolicy)
        self.scrollArea_3.setMinimumSize(QtCore.QSize(0, 400))
        self.scrollArea_3.setStyleSheet("background-color:rgb(215, 215, 215)\n"
"\n"
"")
        self.scrollArea_3.setWidgetResizable(True)
        self.scrollArea_3.setObjectName("scrollArea_3")
        self.scrollAreaWidgetContents_3 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_3.setGeometry(QtCore.QRect(0, 0, 2199, 454))
        self.scrollAreaWidgetContents_3.setObjectName("scrollAreaWidgetContents_3")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.scrollAreaWidgetContents_3)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.tabWidget = QtWidgets.QTabWidget(self.scrollAreaWidgetContents_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tabWidget.sizePolicy().hasHeightForWidth())
        self.tabWidget.setSizePolicy(sizePolicy)
        self.tabWidget.setMinimumSize(QtCore.QSize(400, 400))
        self.tabWidget.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.tabWidget.setObjectName("tabWidget")
        self.magtab = QtWidgets.QWidget()
        self.magtab.setObjectName("magtab")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.magtab)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.mag_comboBox = QtWidgets.QComboBox(self.magtab)
        self.mag_comboBox.setObjectName("daq_comboBox")
        self.mag_comboBox.addItem("")
        self.mag_comboBox.addItem("")
        self.mag_comboBox.addItem("")
        self.mag_comboBox.addItem("")
        self.mag_comboBox.addItem("")
        self.gridLayout_5.addWidget(self.mag_comboBox, 0, 0, 1, 1)
        
        ## newly added button for locomotion
        self.verticalLayout_new1 = QtWidgets.QVBoxLayout()
        self.verticalLayout_new1.setObjectName("verticalLayout_new1")
        self.mag_switch = QtWidgets.QPushButton(self.magtab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.mag_switch.sizePolicy().hasHeightForWidth())
        self.mag_switch.setSizePolicy(sizePolicy)
        self.mag_switch.setMinimumSize(QtCore.QSize(150, 0))
        self.mag_switch.setStyleSheet("background-color: rgb(190, 190, 190);\n"
"font: 16pt \"Times New Roman\";")
        self.mag_switch.setCheckable(True)
        self.mag_switch.setObjectName("mag_switch")
        self.verticalLayout_new1.addWidget(self.mag_switch)
        self.locomotion1 = FloatLineEdit(self.magtab)
        self.locomotion1.setObjectName("locomotion1")
        self.verticalLayout_new1.addWidget(self.locomotion1)
        self.locomotion2 = FloatLineEdit(self.magtab)
        self.locomotion2.setObjectName("locomotion2")
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        # sizePolicy.setHeightForWidth(self.mag_switch.sizePolicy().hasHeightForWidth())
        self.locomotion1.setSizePolicy(sizePolicy)
        self.locomotion2.setSizePolicy(sizePolicy)
        self.verticalLayout_new1.addWidget(self.locomotion2)

        # self.loco_angle_slide = QtWidgets.QSlider(self.magtab)
        # sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        # sizePolicy.setHorizontalStretch(0)
        # sizePolicy.setVerticalStretch(0)
        # sizePolicy.setHeightForWidth(self.loco_angle_slide.sizePolicy().hasHeightForWidth())
        # self.loco_angle_slide.setSizePolicy(sizePolicy)
        # self.loco_angle_slide.setOrientation(QtCore.Qt.Horizontal)
        # self.loco_angle_slide.setObjectName("loco_angle_slide")
        # self.verticalLayout_new1.addWidget(self.loco_angle_slide)
        self.gridLayout_5.addLayout(self.verticalLayout_new1, 1, 0, 1, 1)
        ##
        # self.mag_switch = QtWidgets.QPushButton(self.magtab)
        # sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        # sizePolicy.setHorizontalStretch(0)
        # sizePolicy.setVerticalStretch(0)
        # sizePolicy.setHeightForWidth(self.mag_switch.sizePolicy().hasHeightForWidth())
        # self.mag_switch.setSizePolicy(sizePolicy)
        # self.mag_switch.setMinimumSize(QtCore.QSize(150, 0))
        # self.mag_switch.setStyleSheet("background-color: rgb(190, 190, 190);\n"
# "font: 16pt \"Times New Roman\";")
        # self.mag_switch.setCheckable(True)
        # self.mag_switch.setObjectName("mag_switch")
        # self.gridLayout_5.addWidget(self.mag_switch, 1, 0, 1, 1)
        self.widget = QtWidgets.QWidget(self.magtab)
        self.widget.setObjectName("widget")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.widget)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.label_43 = QtWidgets.QLabel(self.widget)
        self.label_43.setScaledContents(False)
        self.label_43.setAlignment(QtCore.Qt.AlignCenter)
        self.label_43.setObjectName("label_43")
        self.gridLayout_4.addWidget(self.label_43, 0, 1, 1, 1)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setContentsMargins(2, 2, 2, 2)
        self.horizontalLayout_6.setSpacing(0)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.label_33 = QtWidgets.QLabel(self.widget)
        self.label_33.setScaledContents(False)
        self.label_33.setAlignment(QtCore.Qt.AlignCenter)
        self.label_33.setObjectName("label_33")
        self.horizontalLayout_6.addWidget(self.label_33)
        self.label_34 = QtWidgets.QLabel(self.widget)
        self.label_34.setScaledContents(False)
        self.label_34.setAlignment(QtCore.Qt.AlignCenter)
        self.label_34.setObjectName("label_34")
        self.horizontalLayout_6.addWidget(self.label_34)
        self.label_35 = QtWidgets.QLabel(self.widget)
        self.label_35.setScaledContents(False)
        self.label_35.setAlignment(QtCore.Qt.AlignCenter)
        self.label_35.setObjectName("label_35")
        self.horizontalLayout_6.addWidget(self.label_35)
        self.label_36 = QtWidgets.QLabel(self.widget)
        self.label_36.setScaledContents(False)
        self.label_36.setAlignment(QtCore.Qt.AlignCenter)
        self.label_36.setObjectName("label_36")
        self.horizontalLayout_6.addWidget(self.label_36)
        self.gridLayout_4.addLayout(self.horizontalLayout_6, 0, 2, 1, 1)
        self.frame_2 = QtWidgets.QFrame(self.widget)
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.frame_2)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.label_32 = QtWidgets.QLabel(self.frame_2)
        self.label_32.setObjectName("label_32")
        self.verticalLayout_4.addWidget(self.label_32)
        self.label_37 = QtWidgets.QLabel(self.frame_2)
        self.label_37.setObjectName("label_37")
        self.verticalLayout_4.addWidget(self.label_37)
        self.label_38 = QtWidgets.QLabel(self.frame_2)
        self.label_38.setObjectName("label_38")
        self.verticalLayout_4.addWidget(self.label_38)
        self.gridLayout_4.addWidget(self.frame_2, 1, 0, 1, 1)
        self.widget_8 = QtWidgets.QWidget(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget_8.sizePolicy().hasHeightForWidth())
        self.widget_8.setSizePolicy(sizePolicy)
        self.widget_8.setObjectName("widget_8")
        self.verticalLayout_23 = QtWidgets.QVBoxLayout(self.widget_8)
        self.verticalLayout_23.setContentsMargins(10, 10, 10, 10)
        self.verticalLayout_23.setSpacing(0)
        self.verticalLayout_23.setObjectName("verticalLayout_23")
        self.horizontalLayout_50 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_50.setSpacing(10)
        self.horizontalLayout_50.setObjectName("horizontalLayout_50")
        self.x_dc = FloatLineEdit(self.widget_8)
        #self.x_dc = QtWidgets.QDoubleSpinBox(self.widget_8)
        self.x_dc.setObjectName("x_dc")
        self.horizontalLayout_50.addWidget(self.x_dc)
        self.x_wave = QtWidgets.QComboBox(self.widget_8)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.x_wave.sizePolicy().hasHeightForWidth())
        self.x_wave.setSizePolicy(sizePolicy)
        self.x_wave.setMinimumSize(QtCore.QSize(50, 0))
        self.x_wave.setObjectName("x_wave")
        self.x_wave.addItem("")
        self.x_wave.addItem("")
        self.x_wave.addItem("")
        self.horizontalLayout_50.addWidget(self.x_wave)
        #self.x_ac = QtWidgets.QDoubleSpinBox(self.widget_8)
        self.x_ac = FloatLineEdit(self.widget_8)
        self.x_ac.setObjectName("x_ac")
        self.horizontalLayout_50.addWidget(self.x_ac)
        #self.x_freq = QtWidgets.QDoubleSpinBox(self.widget_8)
        self.x_freq = FloatLineEdit(self.widget_8)
        self.x_freq.setObjectName("x_freq")
        self.horizontalLayout_50.addWidget(self.x_freq)
        #self.x_phase = QtWidgets.QDoubleSpinBox(self.widget_8)
        self.x_phase = FloatLineEdit(self.widget_8)
        self.x_phase.setObjectName("x_phase")
        self.horizontalLayout_50.addWidget(self.x_phase)
        self.verticalLayout_23.addLayout(self.horizontalLayout_50)
        self.horizontalLayout_31 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_31.setSpacing(10)
        self.horizontalLayout_31.setObjectName("horizontalLayout_31")
        self.y_dc = FloatLineEdit(self.widget_8)
        self.y_dc.setObjectName("y_dc")
        self.horizontalLayout_31.addWidget(self.y_dc)
        self.y_wave = QtWidgets.QComboBox(self.widget_8)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.y_wave.sizePolicy().hasHeightForWidth())
        self.y_wave.setSizePolicy(sizePolicy)
        self.y_wave.setMinimumSize(QtCore.QSize(50, 0))
        self.y_wave.setObjectName("y_wave")
        self.y_wave.addItem("")
        self.y_wave.addItem("")
        self.y_wave.addItem("")
        self.horizontalLayout_31.addWidget(self.y_wave)
        self.y_ac = FloatLineEdit(self.widget_8)
        self.y_ac.setObjectName("y_ac")
        self.horizontalLayout_31.addWidget(self.y_ac)
        self.y_freq = FloatLineEdit(self.widget_8)
        self.y_freq.setObjectName("y_freq")
        self.horizontalLayout_31.addWidget(self.y_freq)
        self.y_phase = FloatLineEdit(self.widget_8)
        self.y_phase.setObjectName("y_phase")
        self.horizontalLayout_31.addWidget(self.y_phase)
        self.verticalLayout_23.addLayout(self.horizontalLayout_31)
        self.horizontalLayout_51 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_51.setSpacing(10)
        self.horizontalLayout_51.setObjectName("horizontalLayout_51")
        self.z_dc = FloatLineEdit(self.widget_8)
        self.z_dc.setObjectName("z_dc")
        self.horizontalLayout_51.addWidget(self.z_dc)
        self.z_wave = QtWidgets.QComboBox(self.widget_8)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.z_wave.sizePolicy().hasHeightForWidth())
        self.z_wave.setSizePolicy(sizePolicy)
        self.z_wave.setMinimumSize(QtCore.QSize(50, 0))
        self.z_wave.setObjectName("z_wave")
        self.z_wave.addItem("")
        self.z_wave.addItem("")
        self.z_wave.addItem("")
        self.horizontalLayout_51.addWidget(self.z_wave)
        self.z_ac = FloatLineEdit(self.widget_8)
        self.z_ac.setObjectName("z_ac")
        self.horizontalLayout_51.addWidget(self.z_ac)
        self.z_freq = FloatLineEdit(self.widget_8)
        self.z_freq.setObjectName("z_freq")
        self.horizontalLayout_51.addWidget(self.z_freq)
        self.z_phase = FloatLineEdit(self.widget_8)
        self.z_phase.setObjectName("z_phase")
        self.horizontalLayout_51.addWidget(self.z_phase)

        self.verticalLayout_23.addLayout(self.horizontalLayout_51)


        ##
        self.loco_angle_slide = QtWidgets.QSlider(self.widget_8)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.loco_angle_slide.sizePolicy().hasHeightForWidth())
        self.loco_angle_slide.setSizePolicy(sizePolicy)
        self.loco_angle_slide.setOrientation(QtCore.Qt.Horizontal)
        self.loco_angle_slide.setObjectName("loco_angle_slide")
        self.verticalLayout_23.addWidget(self.loco_angle_slide)
##

        self.gridLayout_4.addWidget(self.widget_8, 1, 2, 1, 1)
        self.widget_15 = QtWidgets.QWidget(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget_15.sizePolicy().hasHeightForWidth())
        self.widget_15.setSizePolicy(sizePolicy)
        self.widget_15.setMinimumSize(QtCore.QSize(100, 0))
        self.widget_15.setObjectName("widget_15")
        self.widget_15.setMaximumSize(QtCore.QSize(400, 1000))
        self.verticalLayout_11 = QtWidgets.QVBoxLayout(self.widget_15)
        self.verticalLayout_11.setSpacing(49)
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.earth_x = FloatLineEdit(self.widget_15)
        self.earth_x.setFixedWidth(300)
        self.earth_x.setObjectName("earth_x")
        self.verticalLayout_11.addWidget(self.earth_x)
        self.earth_y = FloatLineEdit(self.widget_15)
        self.earth_y.setObjectName("earth_y")
        self.earth_y.setFixedWidth(300)
        self.verticalLayout_11.addWidget(self.earth_y)
        self.earth_z = FloatLineEdit(self.widget_15)
        self.earth_z.setObjectName("earth_z")
        self.earth_z.setFixedWidth(300)
        self.verticalLayout_11.addWidget(self.earth_z)
        self.gridLayout_4.addWidget(self.widget_15, 1, 1, 1, 1)
        self.gridLayout_5.addWidget(self.widget, 0, 1, 2, 1)
        self.tabWidget.addTab(self.magtab, "")
        self.videotab = QtWidgets.QWidget()
        self.videotab.setObjectName("videotab")
        self.widget_3 = QtWidgets.QWidget(self.videotab)
        self.widget_3.setGeometry(QtCore.QRect(20, 190, 921, 231))
        self.widget_3.setObjectName("widget_3")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.widget_3)
        self.horizontalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.frame_3 = QtWidgets.QFrame(self.widget_3)
        self.frame_3.setMinimumSize(QtCore.QSize(100, 0))
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.frame_3)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.label_10 = QtWidgets.QLabel(self.frame_3)
        self.label_10.setAlignment(QtCore.Qt.AlignCenter)
        self.label_10.setObjectName("label_10")
        self.verticalLayout_6.addWidget(self.label_10)
        self.label_11 = QtWidgets.QLabel(self.frame_3)
        self.label_11.setAlignment(QtCore.Qt.AlignCenter)
        self.label_11.setObjectName("label_11")
        self.verticalLayout_6.addWidget(self.label_11)
        self.label_39 = QtWidgets.QLabel(self.frame_3)
        self.label_39.setAlignment(QtCore.Qt.AlignCenter)
        self.label_39.setObjectName("label_39")
        self.verticalLayout_6.addWidget(self.label_39)
        self.label_40 = QtWidgets.QLabel(self.frame_3)
        self.label_40.setAlignment(QtCore.Qt.AlignCenter)
        self.label_40.setObjectName("label_40")
        self.verticalLayout_6.addWidget(self.label_40)
        self.horizontalLayout_7.addWidget(self.frame_3)
        self.widget_4 = QtWidgets.QWidget(self.widget_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget_4.sizePolicy().hasHeightForWidth())
        self.widget_4.setSizePolicy(sizePolicy)
        self.widget_4.setObjectName("widget_4")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.widget_4)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.vid_exp_slider = QtWidgets.QSlider(self.widget_4)
        self.vid_exp_slider.setOrientation(QtCore.Qt.Horizontal)
        self.vid_exp_slider.setObjectName("vid_exp_slider")
        self.verticalLayout_2.addWidget(self.vid_exp_slider)
        self.vid_gain_slider = QtWidgets.QSlider(self.widget_4)
        self.vid_gain_slider.setOrientation(QtCore.Qt.Horizontal)
        self.vid_gain_slider.setObjectName("vid_gain_slider")
        self.verticalLayout_2.addWidget(self.vid_gain_slider)
        self.vid_bright_slider = QtWidgets.QSlider(self.widget_4)
        self.vid_bright_slider.setOrientation(QtCore.Qt.Horizontal)
        self.vid_bright_slider.setObjectName("vid_bright_slider")
        self.verticalLayout_2.addWidget(self.vid_bright_slider)
        self.vid_gamma_slider = QtWidgets.QSlider(self.widget_4)
        self.vid_gamma_slider.setOrientation(QtCore.Qt.Horizontal)
        self.vid_gamma_slider.setObjectName("vid_gamma_slider")
        self.verticalLayout_2.addWidget(self.vid_gamma_slider)
        self.horizontalLayout_7.addWidget(self.widget_4)
        self.widget_2 = QtWidgets.QWidget(self.widget_3)
        self.widget_2.setMinimumSize(QtCore.QSize(100, 0))
        self.widget_2.setObjectName("widget_2")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.widget_2)
        self.verticalLayout_3.setContentsMargins(5, 5, 5, 5)
        self.verticalLayout_3.setSpacing(20)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.vid_exp_spinbox = QtWidgets.QSpinBox(self.widget_2)
        self.vid_exp_spinbox.setObjectName("vid_exp_spinbox")
        self.verticalLayout_3.addWidget(self.vid_exp_spinbox)
        self.vid_gain_spinbox = QtWidgets.QDoubleSpinBox(self.widget_2)
        self.vid_gain_spinbox.setObjectName("vid_gain_spinbox")
        self.verticalLayout_3.addWidget(self.vid_gain_spinbox)
        self.vid_bright_spinbox = QtWidgets.QSpinBox(self.widget_2)
        self.vid_bright_spinbox.setObjectName("vid_bright_spinbox")
        self.verticalLayout_3.addWidget(self.vid_bright_spinbox)
        self.vid_gamma_spinbox = QtWidgets.QDoubleSpinBox(self.widget_2)
        self.vid_gamma_spinbox.setObjectName("vid_gamma_spinbox")
        self.verticalLayout_3.addWidget(self.vid_gamma_spinbox)
        self.horizontalLayout_7.addWidget(self.widget_2)
        self.vid_device_list = QtWidgets.QComboBox(self.videotab)
        self.vid_device_list.setGeometry(QtCore.QRect(10, 90, 251, 25))
        self.vid_device_list.setObjectName("vid_device_list")

        self.vid_refresh_but = QtWidgets.QPushButton(self.videotab)
        self.vid_refresh_but.setGeometry(QtCore.QRect(50, 30, 161, 34))
        self.vid_refresh_but.setObjectName("vid_refresh_but")
        self.vid_open_cam_but = QtWidgets.QPushButton(self.videotab)
        self.vid_open_cam_but.setGeometry(QtCore.QRect(70, 140, 112, 34))
        self.vid_open_cam_but.setCheckable(True)
        self.vid_open_cam_but.setObjectName("vid_open_cam_but")
        self.vid_stream_but = QtWidgets.QPushButton(self.videotab)
        self.vid_stream_but.setGeometry(QtCore.QRect(320, 30, 141, 34))
        self.vid_stream_but.setCheckable(True)
        self.vid_stream_but.setObjectName("vid_stream_but")
        self.vid_cap_Img_but = QtWidgets.QPushButton(self.videotab)
        self.vid_cap_Img_but.setGeometry(QtCore.QRect(320, 130, 141, 34))
        self.vid_cap_Img_but.setCheckable(False)
        self.vid_cap_Img_but.setObjectName("vid_cap_Img_but")
        self.vid_save_dir_but = QtWidgets.QPushButton(self.videotab)
        self.vid_save_dir_but.setGeometry(QtCore.QRect(1170, 90, 321, 34))
        self.vid_save_dir_but.setObjectName("vid_save_dir_but")
        self.vid_start_rec_but = QtWidgets.QPushButton(self.videotab)
        self.vid_start_rec_but.setGeometry(QtCore.QRect(1590, 90, 221, 34))
        self.vid_start_rec_but.setCheckable(True)
        self.vid_start_rec_but.setObjectName("vid_start_rec_but")
        self.widget_12 = QtWidgets.QWidget(self.videotab)
        self.widget_12.setGeometry(QtCore.QRect(980, 190, 921, 231))
        self.widget_12.setObjectName("widget_12")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout(self.widget_12)
        self.horizontalLayout_8.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.frame_4 = QtWidgets.QFrame(self.widget_12)
        self.frame_4.setMinimumSize(QtCore.QSize(100, 0))
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.frame_4)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.label_41 = QtWidgets.QLabel(self.frame_4)
        self.label_41.setAlignment(QtCore.Qt.AlignCenter)
        self.label_41.setObjectName("label_41")
        self.verticalLayout_7.addWidget(self.label_41)
        self.label_42 = QtWidgets.QLabel(self.frame_4)
        self.label_42.setAlignment(QtCore.Qt.AlignCenter)
        self.label_42.setObjectName("label_42")
        self.verticalLayout_7.addWidget(self.label_42)
        self.label_17 = QtWidgets.QLabel(self.frame_4)
        self.label_17.setAlignment(QtCore.Qt.AlignCenter)
        self.label_17.setObjectName("label_17")
        self.verticalLayout_7.addWidget(self.label_17)
        self.label_18 = QtWidgets.QLabel(self.frame_4)
        self.label_18.setAlignment(QtCore.Qt.AlignCenter)
        self.label_18.setObjectName("label_18")
        self.verticalLayout_7.addWidget(self.label_18)
        self.horizontalLayout_8.addWidget(self.frame_4)
        self.widget_13 = QtWidgets.QWidget(self.widget_12)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget_13.sizePolicy().hasHeightForWidth())
        self.widget_13.setSizePolicy(sizePolicy)
        self.widget_13.setObjectName("widget_13")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout(self.widget_13)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.vid_width_slider = QtWidgets.QSlider(self.widget_13)
        self.vid_width_slider.setOrientation(QtCore.Qt.Horizontal)
        self.vid_width_slider.setObjectName("vid_width_slider")
        self.verticalLayout_8.addWidget(self.vid_width_slider)
        self.vid_height_slider = QtWidgets.QSlider(self.widget_13)
        self.vid_height_slider.setOrientation(QtCore.Qt.Horizontal)
        self.vid_height_slider.setObjectName("vid_height_slider")
        self.verticalLayout_8.addWidget(self.vid_height_slider)
        self.vid_acq_slider = QtWidgets.QSlider(self.widget_13)
        self.vid_acq_slider.setOrientation(QtCore.Qt.Horizontal)
        self.vid_acq_slider.setObjectName("vid_acq_slider")
        self.verticalLayout_8.addWidget(self.vid_acq_slider)
        self.vid_fps_slider = QtWidgets.QSlider(self.widget_13)
        self.vid_fps_slider.setOrientation(QtCore.Qt.Horizontal)
        self.vid_fps_slider.setObjectName("vid_fps_slider")
        self.verticalLayout_8.addWidget(self.vid_fps_slider)
        self.horizontalLayout_8.addWidget(self.widget_13)
        self.widget_14 = QtWidgets.QWidget(self.widget_12)
        self.widget_14.setMinimumSize(QtCore.QSize(100, 0))
        self.widget_14.setObjectName("widget_14")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout(self.widget_14)
        self.verticalLayout_9.setContentsMargins(5, 5, 5, 5)
        self.verticalLayout_9.setSpacing(20)
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.vid_width_spinbox = QtWidgets.QSpinBox(self.widget_14)
        self.vid_width_spinbox.setObjectName("vid_width_spinbox")
        self.verticalLayout_9.addWidget(self.vid_width_spinbox)
        self.vid_height_spinbox = QtWidgets.QSpinBox(self.widget_14)
        self.vid_height_spinbox.setObjectName("vid_height_spinbox")
        self.verticalLayout_9.addWidget(self.vid_height_spinbox)
        self.vid_acq_spinbox = QtWidgets.QSpinBox(self.widget_14)
        self.vid_acq_spinbox.setObjectName("vid_acq_spinbox")
        self.verticalLayout_9.addWidget(self.vid_acq_spinbox)
        self.vid_fps_spinbox = QtWidgets.QSpinBox(self.widget_14)
        self.vid_fps_spinbox.setObjectName("vid_")
        self.verticalLayout_9.addWidget(self.vid_fps_spinbox)
        self.horizontalLayout_8.addWidget(self.widget_14)
        self.tabWidget.addTab(self.videotab, "")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.tab)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.magcyc_switch = QtWidgets.QPushButton(self.tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.magcyc_switch.sizePolicy().hasHeightForWidth())
        self.magcyc_switch.setSizePolicy(sizePolicy)
        self.magcyc_switch.setMinimumSize(QtCore.QSize(150, 0))
        self.magcyc_switch.setStyleSheet("background-color: rgb(190, 190, 190);\n"
"font: 16pt \"Times New Roman\";")
        self.magcyc_switch.setCheckable(True)
        self.magcyc_switch.setObjectName("magcyc_switch")
        self.gridLayout_3.addWidget(self.magcyc_switch, 2, 0, 1, 1)
        self.scrollArea_4 = QtWidgets.QScrollArea(self.tab)
        self.scrollArea_4.setWidgetResizable(True)
        self.scrollArea_4.setObjectName("scrollArea_4")
        self.scrollAreaWidgetContents_4 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_4.setGeometry(QtCore.QRect(0, 0, 1861, 387))
        self.scrollAreaWidgetContents_4.setObjectName("scrollAreaWidgetContents_4")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.scrollAreaWidgetContents_4)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.widget_21 = QtWidgets.QWidget(self.scrollAreaWidgetContents_4)
        self.widget_21.setObjectName("widget_21")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.widget_21)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setContentsMargins(2, 2, 2, 2)
        self.horizontalLayout_3.setSpacing(0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label_2 = QtWidgets.QLabel(self.widget_21)
        self.label_2.setScaledContents(False)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_3.addWidget(self.label_2)
        self.label_8 = QtWidgets.QLabel(self.widget_21)
        self.label_8.setScaledContents(False)
        self.label_8.setAlignment(QtCore.Qt.AlignCenter)
        self.label_8.setObjectName("label_8")
        self.horizontalLayout_3.addWidget(self.label_8)
        self.label_3 = QtWidgets.QLabel(self.widget_21)
        self.label_3.setScaledContents(False)
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_3.addWidget(self.label_3)
        self.label_4 = QtWidgets.QLabel(self.widget_21)
        self.label_4.setScaledContents(False)
        self.label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.label_4.setObjectName("label_4")
        self.horizontalLayout_3.addWidget(self.label_4)
        self.gridLayout_2.addLayout(self.horizontalLayout_3, 0, 1, 1, 1)
        self.label_5 = QtWidgets.QLabel(self.widget_21)
        self.label_5.setScaledContents(False)
        self.label_5.setObjectName("label_5")
        self.gridLayout_2.addWidget(self.label_5, 0, 2, 1, 1)
        self.mag_T_c1 = QtWidgets.QDoubleSpinBox(self.widget_21)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.mag_T_c1.sizePolicy().hasHeightForWidth())
        self.mag_T_c1.setSizePolicy(sizePolicy)
        self.mag_T_c1.setObjectName("mag_T_c1")
        self.gridLayout_2.addWidget(self.mag_T_c1, 1, 2, 1, 1)
        self.widget_5 = QtWidgets.QWidget(self.widget_21)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget_5.sizePolicy().hasHeightForWidth())
        self.widget_5.setSizePolicy(sizePolicy)
        self.widget_5.setObjectName("widget_5")
        self.verticalLayout_18 = QtWidgets.QVBoxLayout(self.widget_5)
        self.verticalLayout_18.setContentsMargins(10, 10, 10, 10)
        self.verticalLayout_18.setSpacing(0)
        self.verticalLayout_18.setObjectName("verticalLayout_18")
        self.horizontalLayout_40 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_40.setSpacing(10)
        self.horizontalLayout_40.setObjectName("horizontalLayout_40")

        self.x_dc_c1 = FloatLineEdit(self.widget_5)
        self.x_dc_c1.setObjectName("x_dc_c1")
        self.horizontalLayout_40.addWidget(self.x_dc_c1)
        self.x_ac_c1 = FloatLineEdit(self.widget_5)
        self.x_ac_c1.setObjectName("x_ac_c1")
        self.horizontalLayout_40.addWidget(self.x_ac_c1)
        self.x_freq_c1 = FloatLineEdit(self.widget_5)
        self.x_freq_c1.setObjectName("x_freq_c1")
        self.horizontalLayout_40.addWidget(self.x_freq_c1)
        self.x_phase_c1 = FloatLineEdit(self.widget_5)
        self.x_phase_c1.setObjectName("x_phase_c1")
        self.horizontalLayout_40.addWidget(self.x_phase_c1)
        self.verticalLayout_18.addLayout(self.horizontalLayout_40)
        self.horizontalLayout_26 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_26.setSpacing(10)
        self.horizontalLayout_26.setObjectName("horizontalLayout_26")
        self.y_dc_c1 = FloatLineEdit(self.widget_5)
        self.y_dc_c1.setObjectName("y_dc_c1")
        self.horizontalLayout_26.addWidget(self.y_dc_c1)
        self.y_ac_c1 = FloatLineEdit(self.widget_5)
        self.y_ac_c1.setObjectName("y_ac_c1")
        self.horizontalLayout_26.addWidget(self.y_ac_c1)
        self.y_freq_c1 = FloatLineEdit(self.widget_5)
        self.y_freq_c1.setObjectName("y_freq_c1")
        self.horizontalLayout_26.addWidget(self.y_freq_c1)
        self.y_phase_c1 = FloatLineEdit(self.widget_5)
        self.y_phase_c1.setObjectName("y_phase_c1")
        self.horizontalLayout_26.addWidget(self.y_phase_c1)
        self.verticalLayout_18.addLayout(self.horizontalLayout_26)
        self.horizontalLayout_41 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_41.setSpacing(10)
        self.horizontalLayout_41.setObjectName("horizontalLayout_41")
        self.z_dc_c1 = FloatLineEdit(self.widget_5)
        self.z_dc_c1.setObjectName("z_dc_c1")
        self.horizontalLayout_41.addWidget(self.z_dc_c1)
        self.z_ac_c1 = FloatLineEdit(self.widget_5)
        self.z_ac_c1.setObjectName("z_ac_c1")
        self.horizontalLayout_41.addWidget(self.z_ac_c1)
        self.z_freq_c1 = FloatLineEdit(self.widget_5)
        self.z_freq_c1.setObjectName("z_freq_c1")
        self.horizontalLayout_41.addWidget(self.z_freq_c1)
        self.z_phase_c1 = FloatLineEdit(self.widget_5)
        self.z_phase_c1.setObjectName("z_phase_c1")
        self.horizontalLayout_41.addWidget(self.z_phase_c1)
        self.verticalLayout_18.addLayout(self.horizontalLayout_41)
        self.gridLayout_2.addWidget(self.widget_5, 1, 1, 1, 1)
        self.frame = QtWidgets.QFrame(self.widget_21)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame.sizePolicy().hasHeightForWidth())
        self.frame.setSizePolicy(sizePolicy)
        self.frame.setMinimumSize(QtCore.QSize(50, 0))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.frame)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.label_6 = QtWidgets.QLabel(self.frame)
        self.label_6.setObjectName("label_6")
        self.verticalLayout_5.addWidget(self.label_6)
        self.label_7 = QtWidgets.QLabel(self.frame)
        self.label_7.setObjectName("label_7")
        self.verticalLayout_5.addWidget(self.label_7)
        self.label_12 = QtWidgets.QLabel(self.frame)
        self.label_12.setObjectName("label_12")
        self.verticalLayout_5.addWidget(self.label_12)
        self.gridLayout_2.addWidget(self.frame, 1, 0, 3, 1)
        self.mag_T_c2 = QtWidgets.QDoubleSpinBox(self.widget_21)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.mag_T_c2.sizePolicy().hasHeightForWidth())
        self.mag_T_c2.setSizePolicy(sizePolicy)
        self.mag_T_c2.setObjectName("mag_T_c2")
        self.gridLayout_2.addWidget(self.mag_T_c2, 2, 2, 1, 1)
        self.mag_T_c3 = QtWidgets.QDoubleSpinBox(self.widget_21)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.mag_T_c3.sizePolicy().hasHeightForWidth())
        self.mag_T_c3.setSizePolicy(sizePolicy)
        self.mag_T_c3.setObjectName("mag_T_c3")
        self.gridLayout_2.addWidget(self.mag_T_c3, 3, 2, 1, 1)
        self.widget_6 = QtWidgets.QWidget(self.widget_21)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget_6.sizePolicy().hasHeightForWidth())
        self.widget_6.setSizePolicy(sizePolicy)
        self.widget_6.setObjectName("widget_6")
        self.verticalLayout_19 = QtWidgets.QVBoxLayout(self.widget_6)
        self.verticalLayout_19.setContentsMargins(10, 10, 10, 10)
        self.verticalLayout_19.setSpacing(0)
        self.verticalLayout_19.setObjectName("verticalLayout_19")
        self.horizontalLayout_42 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_42.setSpacing(10)
        self.horizontalLayout_42.setObjectName("horizontalLayout_42")
        self.x_dc_c2 = FloatLineEdit(self.widget_6)
        self.x_dc_c2.setObjectName("x_dc_c2")
        self.horizontalLayout_42.addWidget(self.x_dc_c2)
        self.x_ac_c2 = FloatLineEdit(self.widget_6)
        self.x_ac_c2.setObjectName("x_ac_c2")
        self.horizontalLayout_42.addWidget(self.x_ac_c2)
        self.x_freq_c2 = FloatLineEdit(self.widget_6)
        self.x_freq_c2.setObjectName("x_freq_c2")
        self.horizontalLayout_42.addWidget(self.x_freq_c2)
        self.x_phase_c2 = FloatLineEdit(self.widget_6)
        self.x_phase_c2.setObjectName("x_phase_c2")
        self.horizontalLayout_42.addWidget(self.x_phase_c2)
        self.verticalLayout_19.addLayout(self.horizontalLayout_42)
        self.horizontalLayout_27 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_27.setSpacing(10)
        self.horizontalLayout_27.setObjectName("horizontalLayout_27")
        self.y_dc_c2 = FloatLineEdit(self.widget_6)
        self.y_dc_c2.setObjectName("y_dc_c2")
        self.horizontalLayout_27.addWidget(self.y_dc_c2)
        self.y_ac_c2 = FloatLineEdit(self.widget_6)
        self.y_ac_c2.setObjectName("y_ac_c2")
        self.horizontalLayout_27.addWidget(self.y_ac_c2)
        self.y_freq_c2 = FloatLineEdit(self.widget_6)
        self.y_freq_c2.setObjectName("y_freq_c2")
        self.horizontalLayout_27.addWidget(self.y_freq_c2)
        self.y_phase_c2 = FloatLineEdit(self.widget_6)
        self.y_phase_c2.setObjectName("y_phase_c2")
        self.horizontalLayout_27.addWidget(self.y_phase_c2)
        self.verticalLayout_19.addLayout(self.horizontalLayout_27)
        self.horizontalLayout_43 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_43.setSpacing(10)
        self.horizontalLayout_43.setObjectName("horizontalLayout_43")
        self.z_dc_c2 = FloatLineEdit(self.widget_6)
        self.z_dc_c2.setObjectName("z_dc_c2")
        self.horizontalLayout_43.addWidget(self.z_dc_c2)
        self.z_ac_c2 = FloatLineEdit(self.widget_6)
        self.z_ac_c2.setObjectName("z_ac_c2")
        self.horizontalLayout_43.addWidget(self.z_ac_c2)
        self.z_freq_c2 = FloatLineEdit(self.widget_6)
        self.z_freq_c2.setObjectName("z_freq_c2")
        self.horizontalLayout_43.addWidget(self.z_freq_c2)
        self.z_phase_c2 = FloatLineEdit(self.widget_6)
        self.z_phase_c2.setObjectName("z_phase_c2")
        self.horizontalLayout_43.addWidget(self.z_phase_c2)
        self.verticalLayout_19.addLayout(self.horizontalLayout_43)
        self.gridLayout_2.addWidget(self.widget_6, 2, 1, 1, 1)
        self.widget_7 = QtWidgets.QWidget(self.widget_21)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget_7.sizePolicy().hasHeightForWidth())
        self.widget_7.setSizePolicy(sizePolicy)
        self.widget_7.setObjectName("widget_7")
        self.verticalLayout_21 = QtWidgets.QVBoxLayout(self.widget_7)
        self.verticalLayout_21.setContentsMargins(10, 10, 10, 10)
        self.verticalLayout_21.setSpacing(0)
        self.verticalLayout_21.setObjectName("verticalLayout_21")
        self.horizontalLayout_46 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_46.setSpacing(10)
        self.horizontalLayout_46.setObjectName("horizontalLayout_46")
        self.x_dc_c3 = FloatLineEdit(self.widget_7)
        self.x_dc_c3.setObjectName("x_dc_c3")
        self.horizontalLayout_46.addWidget(self.x_dc_c3)
        self.x_ac_c3 = FloatLineEdit(self.widget_7)
        self.x_ac_c3.setObjectName("x_ac_c3")
        self.horizontalLayout_46.addWidget(self.x_ac_c3)
        self.x_freq_c3 = FloatLineEdit(self.widget_7)
        self.x_freq_c3.setObjectName("x_freq_c3")
        self.horizontalLayout_46.addWidget(self.x_freq_c3)
        self.x_phase_c3 = FloatLineEdit(self.widget_7)
        self.x_phase_c3.setObjectName("x_phase_c3")
        self.horizontalLayout_46.addWidget(self.x_phase_c3)
        self.verticalLayout_21.addLayout(self.horizontalLayout_46)
        self.horizontalLayout_29 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_29.setSpacing(10)
        self.horizontalLayout_29.setObjectName("horizontalLayout_29")
        self.y_dc_c3 = FloatLineEdit(self.widget_7)
        self.y_dc_c3.setObjectName("y_dc_c3")
        self.horizontalLayout_29.addWidget(self.y_dc_c3)
        self.y_ac_c3 = FloatLineEdit(self.widget_7)
        self.y_ac_c3.setObjectName("y_ac_c3")
        self.horizontalLayout_29.addWidget(self.y_ac_c3)
        self.y_freq_c3 = FloatLineEdit(self.widget_7)
        self.y_freq_c3.setObjectName("y_freq_c3")
        self.horizontalLayout_29.addWidget(self.y_freq_c3)
        self.y_phase_c3 = FloatLineEdit(self.widget_7)
        self.y_phase_c3.setObjectName("y_phase_c3")
        self.horizontalLayout_29.addWidget(self.y_phase_c3)
        self.verticalLayout_21.addLayout(self.horizontalLayout_29)
        self.horizontalLayout_47 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_47.setSpacing(10)
        self.horizontalLayout_47.setObjectName("horizontalLayout_47")
        self.z_dc_c3 = FloatLineEdit(self.widget_7)
        self.z_dc_c3.setObjectName("z_dc_c3")
        self.horizontalLayout_47.addWidget(self.z_dc_c3)
        self.z_ac_c3 = FloatLineEdit(self.widget_7)
        self.z_ac_c3.setObjectName("z_ac_c3")
        self.horizontalLayout_47.addWidget(self.z_ac_c3)
        self.z_freq_c3 = FloatLineEdit(self.widget_7)
        self.z_freq_c3.setObjectName("z_freq_c3")
        self.horizontalLayout_47.addWidget(self.z_freq_c3)
        self.z_phase_c3 = FloatLineEdit(self.widget_7)
        self.z_phase_c3.setObjectName("z_phase_c3")
        self.horizontalLayout_47.addWidget(self.z_phase_c3)
        self.verticalLayout_21.addLayout(self.horizontalLayout_47)
        self.gridLayout_2.addWidget(self.widget_7, 3, 1, 1, 1)
        self.horizontalLayout_4.addWidget(self.widget_21)
        self.scrollArea_4.setWidget(self.scrollAreaWidgetContents_4)
        self.gridLayout_3.addWidget(self.scrollArea_4, 0, 1, 3, 1)
        self.label_9 = QtWidgets.QLabel(self.tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_9.sizePolicy().hasHeightForWidth())
        self.label_9.setSizePolicy(sizePolicy)
        self.label_9.setMinimumSize(QtCore.QSize(150, 0))
        self.label_9.setObjectName("label_9")
        self.gridLayout_3.addWidget(self.label_9, 0, 0, 1, 1)
        self.cycnum = QtWidgets.QSpinBox(self.tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.cycnum.sizePolicy().hasHeightForWidth())
        self.cycnum.setSizePolicy(sizePolicy)
        self.cycnum.setMinimumSize(QtCore.QSize(0, 50))
        self.cycnum.setStyleSheet("font: 16pt \"Times New Roman\";")
        self.cycnum.setAlignment(QtCore.Qt.AlignCenter)
        self.cycnum.setObjectName("cycnum")
        self.gridLayout_3.addWidget(self.cycnum, 1, 0, 1, 1)
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.gridLayout_8 = QtWidgets.QGridLayout(self.tab_2)
        self.gridLayout_8.setObjectName("gridLayout_8")
        self.widget_10 = QtWidgets.QWidget(self.tab_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget_10.sizePolicy().hasHeightForWidth())
        self.widget_10.setSizePolicy(sizePolicy)
        self.widget_10.setMinimumSize(QtCore.QSize(200, 0))
        self.widget_10.setObjectName("widget_10")
        self.gridLayout_6 = QtWidgets.QGridLayout(self.widget_10)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.pushButton_10 = QtWidgets.QPushButton(self.widget_10)
        self.pushButton_10.setCheckable(True)
        self.pushButton_10.setObjectName("pushButton_10")
        self.gridLayout_6.addWidget(self.pushButton_10, 1, 0, 1, 1)
        self.spinBox_6 = QtWidgets.QSpinBox(self.widget_10)
        self.spinBox_6.setAlignment(QtCore.Qt.AlignCenter)
        self.spinBox_6.setObjectName("spinBox_6")
        self.gridLayout_6.addWidget(self.spinBox_6, 1, 2, 1, 1)
        self.pushButton_11 = QtWidgets.QPushButton(self.widget_10)
        self.pushButton_11.setCheckable(True)
        self.pushButton_11.setObjectName("pushButton_11")
        self.gridLayout_6.addWidget(self.pushButton_11, 2, 0, 1, 1)
        self.comboBox_6 = QtWidgets.QComboBox(self.widget_10)
        self.comboBox_6.setObjectName("comboBox_6")
        self.gridLayout_6.addWidget(self.comboBox_6, 0, 0, 1, 1)
        self.horizontalSlider_5 = QtWidgets.QSlider(self.widget_10)
        self.horizontalSlider_5.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_5.setObjectName("horizontalSlider_5")
        self.gridLayout_6.addWidget(self.horizontalSlider_5, 1, 1, 1, 1)
        self.label_14 = QtWidgets.QLabel(self.widget_10)
        self.label_14.setAlignment(QtCore.Qt.AlignCenter)
        self.label_14.setObjectName("label_14")
        self.gridLayout_6.addWidget(self.label_14, 0, 1, 1, 1)
        self.gridLayout_8.addWidget(self.widget_10, 5, 0, 1, 1)
        self.pushButton_9 = QtWidgets.QPushButton(self.tab_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_9.sizePolicy().hasHeightForWidth())
        self.pushButton_9.setSizePolicy(sizePolicy)
        self.pushButton_9.setObjectName("pushButton_9")
        self.gridLayout_8.addWidget(self.pushButton_9, 1, 0, 1, 1)
        self.label_16 = QtWidgets.QLabel(self.tab_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_16.sizePolicy().hasHeightForWidth())
        self.label_16.setSizePolicy(sizePolicy)
        self.label_16.setObjectName("label_16")
        self.gridLayout_8.addWidget(self.label_16, 2, 2, 4, 1)
        self.widget_11 = QtWidgets.QWidget(self.tab_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget_11.sizePolicy().hasHeightForWidth())
        self.widget_11.setSizePolicy(sizePolicy)
        self.widget_11.setMinimumSize(QtCore.QSize(200, 0))
        self.widget_11.setObjectName("widget_11")
        self.gridLayout_7 = QtWidgets.QGridLayout(self.widget_11)
        self.gridLayout_7.setObjectName("gridLayout_7")
        self.spinBox_7 = QtWidgets.QSpinBox(self.widget_11)
        self.spinBox_7.setAlignment(QtCore.Qt.AlignCenter)
        self.spinBox_7.setObjectName("spinBox_7")
        self.gridLayout_7.addWidget(self.spinBox_7, 1, 2, 1, 1)
        self.horizontalSlider_6 = QtWidgets.QSlider(self.widget_11)
        self.horizontalSlider_6.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_6.setObjectName("horizontalSlider_6")
        self.gridLayout_7.addWidget(self.horizontalSlider_6, 1, 1, 1, 1)
        self.comboBox_7 = QtWidgets.QComboBox(self.widget_11)
        self.comboBox_7.setObjectName("comboBox_7")
        self.gridLayout_7.addWidget(self.comboBox_7, 0, 0, 1, 1)
        self.label_13 = QtWidgets.QLabel(self.widget_11)
        self.label_13.setAlignment(QtCore.Qt.AlignCenter)
        self.label_13.setObjectName("label_13")
        self.gridLayout_7.addWidget(self.label_13, 0, 1, 1, 1)
        self.pushButton_13 = QtWidgets.QPushButton(self.widget_11)
        self.pushButton_13.setIconSize(QtCore.QSize(24, 48))
        self.pushButton_13.setCheckable(True)
        self.pushButton_13.setObjectName("pushButton_13")
        self.gridLayout_7.addWidget(self.pushButton_13, 2, 0, 1, 1)
        self.pushButton_12 = QtWidgets.QPushButton(self.widget_11)
        self.pushButton_12.setIconSize(QtCore.QSize(24, 48))
        self.pushButton_12.setCheckable(True)
        self.pushButton_12.setObjectName("pushButton_12")
        self.gridLayout_7.addWidget(self.pushButton_12, 1, 0, 1, 1)
        self.gridLayout_8.addWidget(self.widget_11, 2, 0, 1, 1)
        self.AutoFocus = QtWidgets.QWidget(self.tab_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.AutoFocus.sizePolicy().hasHeightForWidth())
        self.AutoFocus.setSizePolicy(sizePolicy)
        self.AutoFocus.setMinimumSize(QtCore.QSize(400, 100))
        self.AutoFocus.setObjectName("AutoFocus")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.AutoFocus)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.pushButton_14 = QtWidgets.QPushButton(self.AutoFocus)
        self.pushButton_14.setObjectName("pushButton_14")
        self.horizontalLayout_5.addWidget(self.pushButton_14)
        self.label_15 = QtWidgets.QLabel(self.AutoFocus)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_15.sizePolicy().hasHeightForWidth())
        self.label_15.setSizePolicy(sizePolicy)
        self.label_15.setMinimumSize(QtCore.QSize(100, 0))
        self.label_15.setObjectName("label_15")
        self.horizontalLayout_5.addWidget(self.label_15)
        self.spinBox_8 = QtWidgets.QSpinBox(self.AutoFocus)
        self.spinBox_8.setObjectName("spinBox_8")
        self.horizontalLayout_5.addWidget(self.spinBox_8)
        self.pushButton_15 = QtWidgets.QPushButton(self.AutoFocus)
        font = QtGui.QFont()
        font.setPointSize(8)
        self.pushButton_15.setFont(font)
        self.pushButton_15.setCheckable(True)
        self.pushButton_15.setObjectName("pushButton_15")
        self.horizontalLayout_5.addWidget(self.pushButton_15)
        self.gridLayout_8.addWidget(self.AutoFocus, 1, 2, 1, 1)
        self.tabWidget.addTab(self.tab_2, "")
        self.horizontalLayout_2.addWidget(self.tabWidget)
        self.scrollArea_3.setWidget(self.scrollAreaWidgetContents_3)
        self.gridLayout.addWidget(self.scrollArea_3, 1, 0, 2, 3)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 2227, 31))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        


################################
    


        ## slide bar spinbox connection
        self.vid_exp_slider.setRange(0, 20000)
        self.vid_exp_spinbox.setRange(0, 20000)
        self.vid_exp_spinbox.setValue(2000)

        self.vid_gain_slider.setRange(0, 360)
        self.vid_gain_spinbox.setRange(0, 36)
        self.vid_gain_spinbox.setValue(0)

        self.vid_bright_slider.setRange(0, 100)
        self.vid_bright_spinbox.setRange(0, 100)
        self.vid_bright_spinbox.setValue(0)

        self.vid_gamma_slider.setRange(0, 390)
        self.vid_gamma_spinbox.setRange(0, 3.9)
        self.vid_gamma_spinbox.setValue(0.4)
        self.vid_gamma_slider.setValue(40)

        self.vid_width_spinbox.setRange(1,1440)
        self.vid_width_slider.setRange(1,1440)
        self.vid_height_spinbox.setRange(1,1080)
        self.vid_height_slider.setRange(1,1080)
        self.vid_width_spinbox.setValue(1440)
        self.vid_width_slider.setValue(1440)
        self.vid_height_spinbox.setValue(1080)
        self.vid_height_slider.setValue(1080)


        self.vid_exp_slider.valueChanged.connect(self.vid_exp_spinbox.setValue)
        self.vid_exp_slider.valueChanged.connect(self.update_cam_params)
        self.vid_exp_spinbox.valueChanged.connect(self.vid_exp_slider.setValue)


        self.vid_gain_slider.valueChanged.connect(self.updategainSpinBoxValue)
        self.vid_gain_spinbox.valueChanged.connect(self.updategainSliderValue)
        self.vid_gain_slider.valueChanged.connect(self.update_cam_params)

        self.vid_bright_slider.valueChanged.connect(self.vid_bright_spinbox.setValue)
        self.vid_bright_spinbox.valueChanged.connect(self.vid_bright_slider.setValue)
        self.vid_bright_slider.valueChanged.connect(self.update_cam_params)

        self.vid_gamma_slider.valueChanged.connect(self.updategammaSliderValue)
        self.vid_gamma_spinbox.valueChanged.connect(self.updategammaSliderValue)
        self.vid_gamma_slider.valueChanged.connect(self.update_cam_params)


        self.vid_device_list.addItem("")
        self.vid_device_list.addItem("")
        self.vid_device_list.addItem("")
        self.vid_device_list.addItem("")
        

        ##   magnetic spibox range 
        self.earth_x.setValidator(QDoubleValidator(-50,50,2))
        self.earth_y.setValidator(QDoubleValidator(-50,50,2))
        self.earth_z.setValidator(QDoubleValidator(-50,50,2))

        self.x_dc.setValidator(QDoubleValidator(-50,50,2))
        self.y_dc.setValidator(QDoubleValidator(-50,50,2))
        self.z_dc.setValidator(QDoubleValidator(-50,50,2))

        self.x_ac.setValidator(QDoubleValidator(-50,50,2))
        self.y_ac.setValidator(QDoubleValidator(-50,50,2))
        self.z_ac.setValidator(QDoubleValidator(-50,50,2))

        self.x_freq.setValidator(QDoubleValidator(0.01,200,2))
        self.y_freq.setValidator(QDoubleValidator(0.01,200,2))
        self.z_freq.setValidator(QDoubleValidator(0.01,200,2))

        self.x_phase.setValidator(QDoubleValidator(-180,180,2))
        self.y_phase.setValidator(QDoubleValidator(-180,180,2))
        self.z_phase.setValidator(QDoubleValidator(-180,180,2))

        self.loco_angle_slide.setRange(0, 360)
        # self.locomotion2.returnPressed.connect(locomotion_field_update)
        self.loco_angle_slide.valueChanged.connect(self.locomotion2.setValue)
        self.loco_angle_slide.valueChanged.connect(self.locomotion_field_update)
        


        self.x_dc.setText('0')
        self.y_dc.setText('0')
        self.z_dc.setText('0')
        self.x_ac.setText('0')
        self.y_ac.setText('0')
        self.z_ac.setText('0')
        self.x_freq.setText('1')
        self.y_freq.setText('1')
        self.z_freq.setText('1')
        self.x_phase.setText('0')
        self.y_phase.setText('0')
        self.z_phase.setText('0')


        self.x_dc_c1.setText('0')
        self.y_dc_c1.setText('0')
        self.z_dc_c1.setText('0')
        self.x_ac_c1.setText('1')
        self.y_ac_c1.setText('1')
        self.z_ac_c1.setText('1')
        self.x_freq_c1.setText('1')
        self.y_freq_c1.setText('1')
        self.z_freq_c1.setText('1')
        self.x_phase_c1.setText('0')
        self.y_phase_c1.setText('0')
        self.z_phase_c1.setText('0')


        self.x_dc_c2.setText('0')
        self.y_dc_c2.setText('0')
        self.z_dc_c2.setText('0')
        self.x_ac_c2.setText('2')
        self.y_ac_c2.setText('2')
        self.z_ac_c2.setText('2')
        self.x_freq_c2.setText('1')
        self.y_freq_c2.setText('1')
        self.z_freq_c2.setText('1')
        self.x_phase_c2.setText('0')
        self.y_phase_c2.setText('0')
        self.z_phase_c2.setText('0')


        self.x_dc_c3.setText('0')
        self.y_dc_c3.setText('0')
        self.z_dc_c3.setText('0')
        self.x_ac_c3.setText('0')
        self.y_ac_c3.setText('0')
        self.z_ac_c3.setText('0')
        self.x_freq_c3.setText('1')
        self.y_freq_c3.setText('1')
        self.z_freq_c3.setText('1')
        self.x_phase_c3.setText('0')
        self.y_phase_c3.setText('0')
        self.z_phase_c3.setText('0')

        self.mag_T_c1.setRange(0.0, 9999.0)
        self.mag_T_c2.setRange(0.0, 9999.0)
        self.mag_T_c3.setRange(0.0, 9999.0)
        self.cycnum.setRange(0,9999)
        self.cycnum.setValue(99)

        self.locomotion1.setText('0')
        self.locomotion2.setText('0')



        ##   cancel earth field
        self.earth_x.setValue(-0.117)
        self.earth_y.setValue(0.077)
        self.earth_z.setValue(-0.574)


        ## connect x y z field
        self.mag_comboBox.currentIndexChanged.connect(self.connect_magnetic_fields)



        ## set all button functions## 
        self.set_button_functions()

        ## set queues for communication between processes and threads
        self.queue_img1 = mp.Queue()
        self.queue_img2 = mp.Queue()
        self.queue_awgcom = mp.Queue()
        self.queue_mag = mp.Queue()
        self.queue_plot = mp.Queue()
        self.queue_cam = mp.Queue()
        self.queue_awg2cam = mp.Queue()
        self.queue_magcyc = mp.Queue()
        self.camera =[]



        ## set events for camera process
        self.stop_capture_event = mp.Event()
        self.stop_record_event = mp.Event()
        self.set_cam_parameter_event = mp.Event()
        self.cam_params = cam_params()


        
        


        # define video thread
        self.vid_thread = VideoThread(self.queue_img1)
        self.vid_thread.changePixmap.connect(self.setImage)
        self.vid_thread.streaming_status = False


        ## define plot thread
        #self.plot_thread = PlotThread()
        #self.plot_thread.changePixmap.connect(self.setPlot)
        #self.plot_thread.ploting_status = False


        # define AWG thread
        self.DAQ_status =False
        self.awg_thread = AWGThread(self.queue_awgcom, self.queue_mag,self.queue_awg2cam)
        self.awg_thread.Dev1_init.connect(self.daq_initialized)
        
        self.awg_thread.noDev1.connect(partial(self.nodaqfound,self.queue_awg2cam))
        self.update_awg_com()
        

        # define magcyc thread
        self.magcyc_thread = MAGCycThread(self.queue_magcyc)
        self.magcyc_thread.field_change_signal.connect(self.update_cyclic_field)






        self.awg_trigger_timing = time.time()
        self.awg_thread.start()
        #self.awg_thread.signal
        self.mag_switch.toggled.connect(self.mag_switch_toggled)
        self.magcyc_switch.toggled.connect(self.magcyc_switch_toggled)

        self.x_dc.returnPressed.connect(self.update_awg_com)
        self.x_ac.returnPressed.connect(self.update_awg_com)
        self.x_freq.returnPressed.connect(self.update_awg_com)
        self.x_phase.returnPressed.connect(self.update_awg_com)
        self.x_wave.currentIndexChanged.connect(self.update_awg_com)


        self.y_dc.returnPressed.connect(self.update_awg_com)
        self.y_ac.returnPressed.connect(self.update_awg_com)
        self.y_freq.returnPressed.connect(self.update_awg_com)
        self.y_phase.returnPressed.connect(self.update_awg_com)
        self.y_wave.currentIndexChanged.connect(self.update_awg_com)

        self.z_dc.returnPressed.connect(self.update_awg_com)
        self.z_ac.returnPressed.connect(self.update_awg_com)
        self.z_freq.returnPressed.connect(self.update_awg_com)
        self.z_phase.returnPressed.connect(self.update_awg_com)
        self.z_wave.currentIndexChanged.connect(self.update_awg_com)


       
        self.x_dc.returnPressed.connect(self.update_AC_range)
        self.y_dc.returnPressed.connect(self.update_AC_range)
        self.z_dc.returnPressed.connect(self.update_AC_range)

    def on_text_change_FloatLineEdit(self,text):
        try:
            number = float(text)
        except ValueError:
            pass


    def update_AC_range(self):

        self.x_ac.setValidator(QDoubleValidator(-50+abs(float(self.x_dc.text())),50-abs(float(self.x_dc.text())),2))
        self.y_ac.setValidator(QDoubleValidator(-50+abs(float(self.y_dc.text())),50-abs(float(self.y_dc.text())),2))
        self.z_ac.setValidator(QDoubleValidator(-50+abs(float(self.z_dc.text())),50-abs(float(self.z_dc.text())),2))

        self.x_ac_c1.setValidator(QDoubleValidator(-50+abs(float(self.x_dc_c1.text())),50-abs(float(self.x_dc_c1.text())),2))
        self.y_ac_c1.setValidator(QDoubleValidator(-50+abs(float(self.y_dc_c1.text())),50-abs(float(self.y_dc_c1.text())),2))
        self.z_ac_c1.setValidator(QDoubleValidator(-50+abs(float(self.z_dc_c1.text())),50-abs(float(self.z_dc_c1.text())),2))

        self.x_ac_c2.setValidator(QDoubleValidator(-50+abs(float(self.x_dc_c2.text())),50-abs(float(self.x_dc_c2.text())),2))
        self.y_ac_c2.setValidator(QDoubleValidator(-50+abs(float(self.y_dc_c2.text())),50-abs(float(self.y_dc_c2.text())),2))
        self.z_ac_c2.setValidator(QDoubleValidator(-50+abs(float(self.z_dc_c2.text())),50-abs(float(self.z_dc_c2.text())),2))

        self.x_ac_c3.setValidator(QDoubleValidator(-50+abs(float(self.x_dc_c3.text())),50-abs(float(self.x_dc_c3.text())),2))
        self.y_ac_c3.setValidator(QDoubleValidator(-50+abs(float(self.y_dc_c3.text())),50-abs(float(self.y_dc_c3.text())),2))
        self.z_ac_c3.setValidator(QDoubleValidator(-50+abs(float(self.z_dc_c3.text())),50-abs(float(self.z_dc_c3.text())),2))
        # self.x_ac.setRange(-50+abs(self.x_dc.value()),50-abs(self.x_dc.value()))
        # self.y_ac.setRange(-50+abs(self.y_dc.value()),50-abs(self.y_dc.value()))
        # self.z_ac.setRange(-50+abs(self.z_dc.value()),50-abs(self.z_dc.value()))

    def mag_switch_toggled(self,checked):
        if checked:
            if not self.DAQ_status:
                print('DAQ status False')
                self.mag_switch.setChecked(False)
            else:
                print("magnetic field on")
                self.mag_switch.setText('Field On')
                self.awg_thread.switch_signal.emit(True)
                self.update_awg_com()
        else:
            if self.DAQ_status:
                print("magnetic field off")
                self.mag_switch.setText('Field Off')
                self.awg_thread.switch_signal.emit(False)
            else:
                pass


    def magcyc_switch_toggled(self,checked):
        if checked:
            # self.mag_switch.setChecked(True)
            # if not self.mag_switch.isChecked():
            #     self.magcyc_switch.setChecked(False)
            # else:
            self.magcyc_info = [self.mag_T_c1.value(),self.mag_T_c2.value(),self.mag_T_c3.value(),self.cycnum.value()]
            self.queue_magcyc.put(self.magcyc_info)
            self.magcyc_thread.start()
            print('magetic cycling starts!')


        else:
            self.magcyc_thread.stop()
            self.magcyc_thread.quit()
            print("magnetic field cycling stop.")
            # self.mag_switch.setChecked(False)


    def update_awg_com(self):
        #delay = time.time()-self.awg_trigger_timing
        #if delay>0.1
        
        
        self.awg_info =[self.x_dc.value()/28.2/-0.2004,self.x_freq.value(),self.x_ac.value()/28.2/-0.2004,self.x_phase.value()/180*np.pi,self.y_dc.value()/22.49/-0.2001,self.y_freq.value(),self.y_ac.value()/22.49/-0.2001,\
        self.y_phase.value()/180*np.pi, self.z_dc.value()/36.06/-0.2002,self.z_freq.value(),self.z_ac.value()/36.06/-0.2002,self.z_phase.value()/180*np.pi,self.x_wave.currentIndex(),self.y_wave.currentIndex(),self.z_wave.currentIndex()]
        self.queue_awgcom.put(self.awg_info)
        print(self.awg_info)
        self.awg_thread.awgcom_signal.emit()

        # else:
        #     time.sleep(0.1-delay)
        #     self.awg_info =[self.x_dc.value(),self.x_freq.value(),self.x_ac.value(),self.x_phase.value(),self.y_dc.value(),self.y_freq.value(),self.y_ac.value(),self.y_phase.value(),\
        #     self.z_dc.value(),self.y_freq.value(),self.y_ac.value(),self.y_phase.value()]
        #     self.queue_awgcom.put(self.awg_info)


    def daq_initialized(self):
        self.DAQ_status = True
        print('DAQ status changed to be True')

    def nodaqfound(self,queue_awg2cam):
        print("Daq1 not found")
        choice = self.open_custom_dialog('Daq Dev1 not found!','Daq Dev1 not found! Continue without daq output?')
        if choice == True:
            print('yes clicked')
            queue_awg2cam.put(1)  # message to cam thread that daq is ready
            pass
        elif choice == False:
            print('no clicked')
            self.awg_thread.quit()
            self.awg_thread.wait()
            self.MainWindow.close()
            print('mainwindow closed')
            queue_awg2cam.put(None)




    def updategainSpinBoxValue(self,value):
        self.vid_gain_spinbox.setValue(value/10)
    def updategainSliderValue(self, value):
        self.vid_gain_slider.setValue(value*10)

    def updategammaSpinBoxValue(self,value):
        self.vid_gamma_spinbox.setValue(value/100)
    def updategammaSliderValue(self, value):
        self.vid_gamma_slider.setValue(value*100)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))

        self.plot_label1.setText(_translate("MainWindow", "X-Field Plot"))
        self.plot_label2.setText(_translate("MainWindow", "Y-Fidld Plot"))
        self.plot_label3.setText(_translate("MainWindow", "Z-Fidld Plot"))
        self.video_label.setText(_translate("MainWindow", "Video_Display"))
        self.plot_label1.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:20pt;\">X-Field Plot</span></p></body></html>"))
        self.plot_label2.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:20pt;\">Y-Field Plot Plot</span></p></body></html>"))
        self.plot_label3.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:20pt;\">Z-Field Plot</span></p></body></html>"))
        self.video_label.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:20pt;\">Video_Display</span></p></body></html>"))


        self.mag_comboBox.setItemText(0, _translate("MainWindow", "N/A"))
        self.mag_comboBox.setItemText(1, _translate("MainWindow", "X-Y"))
        self.mag_comboBox.setItemText(2, _translate("MainWindow", "X-Z"))
        self.mag_comboBox.setItemText(3, _translate("MainWindow", "Y-Z"))
        self.mag_comboBox.setItemText(4, _translate("MainWindow", "XY locomotion"))

        self.mag_switch.setText(_translate("MainWindow", "Field Off"))
        self.label_43.setText(_translate("MainWindow", "Earth Field Cancel (Oe)"))
        self.label_43.setFixedWidth(300)
        self.label_33.setText(_translate("MainWindow", "DC (Oe)"))
        self.label_34.setText(_translate("MainWindow", "AC (Oe)"))
        self.label_35.setText(_translate("MainWindow", "Frequency(Hz)"))
        self.label_36.setText(_translate("MainWindow", "Phase (degree)"))
        self.label_32.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:16pt;\">X</span></p></body></html>"))
        self.label_37.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:16pt;\">Y</span></p></body></html>"))
        self.label_38.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:16pt;\">Z</span></p></body></html>"))
        self.x_wave.setItemText(0, _translate("MainWindow", "Sin"))
        self.x_wave.setItemText(1, _translate("MainWindow", "Square"))
        self.x_wave.setItemText(2, _translate("MainWindow", "Triangle"))
        self.y_wave.setItemText(0, _translate("MainWindow", "Sin"))
        self.y_wave.setItemText(1, _translate("MainWindow", "Square"))
        self.y_wave.setItemText(2, _translate("MainWindow", "Triangle"))
        self.z_wave.setItemText(0, _translate("MainWindow", "Sin"))
        self.z_wave.setItemText(1, _translate("MainWindow", "Square"))
        self.z_wave.setItemText(2, _translate("MainWindow", "Triangle"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.magtab), _translate("MainWindow", "Magnetic"))
        self.label_10.setText(_translate("MainWindow", "Exposure (us)"))
        self.label_11.setText(_translate("MainWindow", "Gain"))
        self.label_39.setText(_translate("MainWindow", "Brightness"))
        self.label_40.setText(_translate("MainWindow", "Gamma"))
        self.vid_refresh_but.setText(_translate("MainWindow", "Refresh Device List"))
        self.vid_open_cam_but.setText(_translate("MainWindow", "Open Camera"))
        self.vid_stream_but.setText(_translate("MainWindow", "Start Streaming"))
        self.vid_cap_Img_but.setText(_translate("MainWindow", "Capture Image"))
        self.vid_save_dir_but.setText(_translate("MainWindow", "Save Directory"))
        self.vid_start_rec_but.setText(_translate("MainWindow", "Start Recording"))
        self.label_41.setText(_translate("MainWindow", "Width"))
        self.label_42.setText(_translate("MainWindow", "Height"))
        self.label_17.setText(_translate("MainWindow", "Acquisition Rate"))
        self.label_18.setText(_translate("MainWindow", "Recording FPS"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.videotab), _translate("MainWindow", "Video"))
        self.magcyc_switch.setText(_translate("MainWindow", "Field Off"))
        self.label_2.setText(_translate("MainWindow", "DC (Oe)"))
        self.label_8.setText(_translate("MainWindow", "AC (Oe)"))
        self.label_3.setText(_translate("MainWindow", "Frequency(Hz)"))
        self.label_4.setText(_translate("MainWindow", "Phase (degree)"))
        self.label_5.setText(_translate("MainWindow", "Duration (s)"))
        self.label_6.setText(_translate("MainWindow", "Field 1"))
        self.label_7.setText(_translate("MainWindow", "Field 2"))
        self.label_12.setText(_translate("MainWindow", "Field 3"))
        self.label_9.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:14pt; font-weight:600;\">Number of cycles</span></p></body></html>"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Cyclic Magnetic Field"))
        self.pushButton_10.setText(_translate("MainWindow", "Inject"))
        self.spinBox_6.setSuffix(_translate("MainWindow", " uL/min"))
        self.pushButton_11.setText(_translate("MainWindow", "Withdraw"))
        self.label_14.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:16pt;\">Pump 2</span></p></body></html>"))
        self.pushButton_9.setText(_translate("MainWindow", "Refresh Device List"))
        self.label_16.setText(_translate("MainWindow", "Focus Measure vs Time plot"))
        self.spinBox_7.setSuffix(_translate("MainWindow", " uL/min"))
        self.label_13.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:16pt;\">Pump 1</span></p></body></html>"))
        self.pushButton_13.setText(_translate("MainWindow", "Withdraw"))
        self.pushButton_12.setText(_translate("MainWindow", "Inject"))
        self.pushButton_14.setText(_translate("MainWindow", "Focus Measure"))
        self.label_15.setText(_translate("MainWindow", "Threshold FM"))
        self.pushButton_15.setText(_translate("MainWindow", "Auto Focus (Off)"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Syringe Pump"))

    def update_value(self,obj,value):
        obj = value


    def click_streaming(self):



        if (self.streaming_status == False) and (self.camera_open_status == True):
            self.update_cam_params()
            self.start_streaming()
            self.vid_stream_but.setChecked(True)

        elif not self.camera_open_status:
            self.openPopUpWindow("Camera not open", "Camera not open")
            self.vid_stream_but.setChecked(False)

        elif self.streaming_status == True:
            self.stop_streaming()
            self.vid_stream_but.setChecked(False)



    def update_cam_params(self):
        self.cam_params.Gain = self.vid_gain_spinbox.value() # 0-36 db
        self.cam_params.Gamma = self.vid_gamma_spinbox.value()
        self.cam_params.Width = self.vid_width_spinbox.value()
        self.cam_params.Height = self.vid_height_spinbox.value()
        #self.OffsetX= 0
        #self.OffsetY=0
        #self.Format = "Mono8"
        self.cam_params.Fps = self.vid_acq_spinbox.value()
        self.cam_params.Exposure = self.vid_exp_spinbox.value() # in microseconds
        print('camera parameter updated')
        self.set_cam_parameter_event.set()
        self.queue_cam.put(self.cam_params)





    def start_streaming(self):
        self.stop_capture_event.clear()
        #self.capture_process = mp.Process(target=capture_video, args=(self.stop_capture_event,self.camera_index,self.queue_img1,
            #self.queue_img2,self.queue_com,self.queue_mag,))
        self.capture_process = mp.Process(target=open_camera_mp, args=(self.camera_index,self.stop_capture_event,
            self.set_cam_parameter_event,self.queue_img1,self.queue_img2,self.queue_mag,self.queue_cam))
        self.capture_process.start()
        print('test')
        self.streaming_status = True

        self.vid_thread.start()

    def stop_streaming(self):
        self.stop_capture_event.set()
        self.capture_process.join()
        self.streaming_status = False
        self.vid_thread.quit()
        self.vid_thread.wait()
        
    # def start_ploting(self):
    #     #self.plot_thread.ploting_status.emit(True)
    #     self.plot_thread.start()

    # def stop_ploting(self):
    #     #self.plot_thread.ploting_status.emit(False)
    #     self.plot_thread.quit()
    #     self.plot_thread.wait()


    def setImage(self, image):
        self.video_label.setPixmap(QPixmap.fromImage(image))

    def setPlot(self, plot):
        self.plot_label.setPixmap(QPixmap.fromImage(plot))


    def select_camera_from_list(self,index):
        if len(self.cameras)>index:
            self.camera = self.cameras[index]
            print("camera "+ self.cam_devices[index].GetFriendlyName()+ "selected")
            self.camera_selection_status = True
        else:
            print('not available')
            self.camera_selection_status = False
            
    def open_camera(self):
        if (self.camera_selection_status == True) and (self.camera_open_status == False):
            self.camera_open_status = True
            print('camera opened in qt')

        elif self.camera_selection_status == False:
            self.openPopUpWindow("camera not selected","camera not selected")
            self.vid_open_cam_but.setChecked(False)
        else:
            self.openPopUpWindow("camera closed","camera closed")
            print("Camera closed")
            self.camera.Close()
            self.vid_open_cam_but.setChecked(False)
            self.camera_open_status = False
           

    def openPopUpWindow(self,title,text):
        msg = QtWidgets.QMessageBox()
        msg.setWindowTitle(title)
        msg.setText(text)
        msg.setIcon(QtWidgets.QMessageBox.Warning)
        x = msg.exec_()

    def open_custom_dialog(self,title,text):
        custom_dialog = CustomDialog(title,text)
        result = custom_dialog.exec_()

        if result == QDialog.Accepted:
            return True
        else:
            return False


    def select_camera_deviceID(self):
        _translate = QtCore.QCoreApplication.translate
        #print('1')
        self.cameras = []
        self.tl_factory = pylon.TlFactory.GetInstance()
        self.cam_devices = self.tl_factory.EnumerateDevices()

        if not self.cam_devices:
            self.openPopUpWindow("No Camera Found", "No Camera Found")
        else:

            for i in range(4):
                if i < len(self.cam_devices):
                    self.cameras.append(pylon.InstantCamera(self.tl_factory.CreateDevice(self.cam_devices[i])))
                    print(self.cam_devices[i].GetFriendlyName()+'initialized')
                    self.vid_device_list.setItemText(i, _translate("MainWindow",self.cam_devices[i].GetFriendlyName()))

                else:
                    self.vid_device_list.setItemText(i, _translate("MainWindow",""))
            self.select_camera_from_list(0)  # select camera 0 by default

    def set_button_functions(self):
        self.camera_deviceID=None
        self.vid_refresh_but.clicked.connect(self.select_camera_deviceID)
        self.vid_device_list.currentIndexChanged.connect(self.select_camera_from_list)        
        self.camera_selection_status = False
        self.vid_open_cam_but.clicked.connect(self.open_camera)
        self.camera_open_status = False
        self.streaming_status = False
        self.vid_stream_but.clicked.connect(self.click_streaming)
        self.camera_index = self.vid_device_list.currentIndex()


    def connect_magnetic_fields(self,index):
        if index == 1:  # x=y
            self.x_dc.returnPressed.connect(self.y_dc.setValue)
            self.x_ac.returnPressed.connect(self.y_ac.setValue)
            self.x_freq.returnPressed.connect(self.y_freq.setValue)
            self.x_wave.currentIndexChanged.connect(self.y_wave.setCurrentIndex)
            self.y_dc.returnPressed.connect(self.x_dc.setValue)
            self.y_ac.returnPressed.connect(self.x_ac.setValue)
            self.y_freq.returnPressed.connect(self.x_freq.setValue)
            self.y_wave.currentIndexChanged.connect(self.x_wave.setCurrentIndex)
            self.update_awg_com()

        if index == 2:  ## x = z
            self.x_dc.returnPressed.connect(self.z_dc.setValue)
            self.x_ac.returnPressed.connect(self.z_ac.setValue)
            self.x_freq.returnPressed.connect(self.z_freq.setValue)
            self.x_wave.currentIndexChanged.connect(self.z_wave.setCurrentIndex)
            self.z_dc.returnPressed.connect(self.x_dc.setValue)
            self.z_ac.returnPressed.connect(self.x_ac.setValue)
            self.z_freq.returnPressed.connect(self.x_freq.setValue)
            self.z_wave.currentIndexChanged.connect(self.x_wave.setCurrentIndex)
            self.update_awg_com()

        if index == 3:  ## x = z
            self.y_dc.returnPressed.connect(self.z_dc.setValue)
            self.y_ac.returnPressed.connect(self.z_ac.setValue)
            self.y_freq.returnPressed.connect(self.z_freq.setValue)
            self.y_wave.currentIndexChanged.connect(self.z_wave.setCurrentIndex)
            self.z_dc.returnPressed.connect(self.y_dc.setValue)
            self.z_ac.returnPressed.connect(self.y_ac.setValue)
            self.z_freq.returnPressed.connect(self.y_freq.setValue)
            self.z_wave.currentIndexChanged.connect(self.y_wave.setCurrentIndex)
            self.update_awg_com()

        if index == 4:  ## x = z
            self.locomotion1.returnPressed.connect(self.locomotion_field_update)
            self.locomotion2.returnPressed.connect(self.locomotion_field_update)
            self.loco_angle_slide.valueChanged.connect(self.locomotion_field_update)
            self.update_awg_com()

    def locomotion_field_update(self):

        print('test')
        amp = self.locomotion1.value()
        angle =self.locomotion2.value()
        self.loco_angle_slide.setValue(angle)
        print(amp,angle)
        Ax = amp*np.cos(angle/180*np.pi)
        Ax = round(Ax,2)
        Ay = amp*np.sin(angle/180*np.pi)
        Ay = round(Ay,2)
        self.x_ac.setValue(Ax)
        self.y_ac.setValue(Ay)
        self.update_awg_com()


    def update_cyclic_field(self,index):
        # self.awg_thread.switch_signal.emit(False)
        if index == 0:
            self.x_dc.setValue(self.x_dc_c1.value())
            self.y_dc.setValue(self.y_dc_c1.value())
            self.z_dc.setValue(self.z_dc_c1.value())
            self.x_ac.setValue(self.x_ac_c1.value())
            self.y_ac.setValue(self.y_ac_c1.value())
            self.z_ac.setValue(self.z_ac_c1.value())
            self.x_freq.setValue(self.x_freq_c1.value())
            self.y_freq.setValue(self.y_freq_c1.value())
            self.z_freq.setValue(self.z_freq_c1.value())
            self.x_phase.setValue(self.x_phase_c1.value())
            self.y_phase.setValue(self.y_phase_c1.value())
            self.z_phase.setValue(self.z_phase_c1.value())
            self.update_awg_com()

        if index == 1:
            self.x_dc.setValue(self.x_dc_c2.value())
            self.y_dc.setValue(self.y_dc_c2.value())
            self.z_dc.setValue(self.z_dc_c2.value())
            self.x_ac.setValue(self.x_ac_c2.value())
            self.y_ac.setValue(self.y_ac_c2.value())
            self.z_ac.setValue(self.z_ac_c2.value())
            self.x_freq.setValue(self.x_freq_c2.value())
            self.y_freq.setValue(self.y_freq_c2.value())
            self.z_freq.setValue(self.z_freq_c2.value())
            self.x_phase.setValue(self.x_phase_c2.value())
            self.y_phase.setValue(self.y_phase_c2.value())
            self.z_phase.setValue(self.z_phase_c2.value())
            self.update_awg_com()
            
        if index == 2:
            self.x_dc.setValue(self.x_dc_c3.value())
            self.y_dc.setValue(self.y_dc_c3.value())
            self.z_dc.setValue(self.z_dc_c3.value())
            self.x_ac.setValue(self.x_ac_c3.value())
            self.y_ac.setValue(self.y_ac_c3.value())
            self.z_ac.setValue(self.z_ac_c3.value())
            self.x_freq.setValue(self.x_freq_c3.value())
            self.y_freq.setValue(self.y_freq_c3.value())
            self.z_freq.setValue(self.z_freq_c3.value())
            self.x_phase.setValue(self.x_phase_c3.value())
            self.y_phase.setValue(self.y_phase_c3.value())
            self.z_phase.setValue(self.z_phase_c3.value())
            self.update_awg_com()
        # self.awg_thread.switch_signal.emit(True)



class CustomDialog(QDialog):
    def __init__(self,title,text):
        super().__init__()
        self.title = title
        self.text = text
        self.initUI()

    def initUI(self):
        self.setWindowTitle(self.title)

        layout = QVBoxLayout()

        label = QLabel(self.text)
        layout.addWidget(label)

        yes_button = QPushButton("Yes")
        yes_button.clicked.connect(self.on_yes_button_click)
        layout.addWidget(yes_button)

        no_button = QPushButton("No")
        no_button.clicked.connect(self.on_no_button_click)
        layout.addWidget(no_button)

        self.setLayout(layout)

    def on_yes_button_click(self):
        self.setResult(QDialog.Accepted)
        self.accept()

    def on_no_button_click(self):
        self.setResult(QDialog.Rejected)
        self.reject()

class cam_params():
    def __init__(self):
        self.Gain = 10 # 0-36 db
        self.Gamma = 0.4
        self.Width = 1440
        self.Height = 1080
        self.OffsetX=0
        self.OffsetY=0
        self.Format = "Mono8"
        self.Fps = 200
        self.Exposure = 500 # in microseconds


def change_cam_params(camera,cam_params):
    try:
        camera.Gain.SetValue(cam_params.Gain)
        camera.Gamma.SetValue(cam_params.Gamma)
        camera.Width = cam_params.Width
        camera.Height = cam_params.Height
        camera.OffsetX= cam_params.OffsetX
        camera.OffsetY= cam_params.OffsetY
        camera.PixelFormat = cam_params.Format#"Mono8"
        #camera.MaxNumberBuffer = 20
        #camera.AcquisitionFrameRateEnable.SetValue(True)
        camera.AcquisitionFrameRate.SetValue(cam_params.Fps)
        camera.ExposureTime =  cam_params.Exposure

    except:
        pass



def open_camera_mp(camera_index,stop_capture_event,set_cam_parameter_event,queue_img1,queue_img2,queue_mag,queue_cam,queue_awg2cam):

    
    tl_factory = pylon.TlFactory.GetInstance()
    devices = tl_factory.EnumerateDevices()
    camera = pylon.InstantCamera(tl_factory.CreateDevice(devices[camera_index]))
    camera.Open()
    print('camera opens successfully!')

    camera.Gain.SetValue(10) # 0-36 db
    camera.Gamma.SetValue(0.4)
    camera.Width = camera.Width.Max
    camera.Height = camera.Height.Max
    camera.OffsetX=0
    camera.OffsetY=0
    camera.PixelFormat = "Mono8"
    #camera.MaxNumberBuffer = 20
    camera.AcquisitionFrameRateEnable.SetValue(True)
    camera.AcquisitionFrameRate.SetValue(200.0)
    camera.ExposureTime = 500 # in microseconds

    camera.StartGrabbing(pylon.GrabStrategy_LatestImageOnly)
    converter = pylon.ImageFormatConverter()
    # converting to opencv bgr format
    #converter.OutputPixelFormat = pylon.PixelType_BGR8packed
    converter.OutputPixelFormat = pylon.PixelType_Mono8
    converter.OutputBitAlignment = pylon.OutputBitAlignment_MsbAligned
    
    start_time = time.time()
    time.sleep(0.0001)
    frame_count = 0
    time_capture = 0
    time_show = 0
    time_puttext=0
    DAQ_status = None
    try:
        DAQ_status = queue_awg2cam.get(block = False)
    except mp.queues.Empty:
        print("The queue_awg2cam is empty")


    while (not stop_capture_event.is_set())and camera.IsGrabbing():
        t1=time.time()
        if DAQ_status == 1:
            queue_awg2cam.put(2) #request magnetic input information from analoginput thread right before the camera grab the frame

        grabResult = camera.RetrieveResult(5000,pylon.TimeoutHandling_ThrowException) # timeout at 5000 ms
        frame_width = grabResult.Width
        frame_height = grabResult.Height

        if grabResult.GrabSucceeded():
            # access the image data
            #image = converter.Convert(grabResult)
            #img = grabResult.GetArray()
            img = np.array(grabResult.Array, dtype=np.uint8)
            
            if DAQ_status == 1:
                try:
                    mag_data = queue_mag.get()
                except mp.queues.Empty:
                    pass

            else:
                mag_data=[0,0,0]    

            t2=time.time()
            time_capture += t2-t1
            frame_rate = frame_count / (time.time() - start_time)
            cv2.putText(img, "FPS: {:.2f}".format(frame_rate), (10, 30),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0), 2)

            cv2.putText(img, "Mag (Oe): \n"+"x= {:.2f} \n".format(mag_data[0])+"y= {:.2f} \n".format(mag_data[1])+\
                "z= {:.2f} \n".format(mag_data[2]), (10, 40),\
                    cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0), 2)


            queue_img1.put(img)
            #queue_img2.put(img)

            frame_count += 1
            t3=time.time()
            time_puttext += t3-t2
            
            #cv2.imshow('Display',img)

            t4=time.time()
            time_show += t4-t3
        else:
            print('grab failed')
        if stop_capture_event.is_set():
            print('capture stopped')
            break
        while not queue_cam.empty():
            print('test4')
            cam_params = queue_cam.get()
            print('test5')
        if set_cam_parameter_event.is_set():
            
            change_cam_params(camera,cam_params)
            set_cam_parameter_event.clear()


    print('test7')
    
    queue_img1.put(None)
    queue_img2.put(None)
    

        
    grabResult.Release()
    camera.StopGrabbing()
    camera.close()


    


    # # def change_folder(self):
    # #     path = QFileDialog.getExistingDirectory(self, 
    # #                                             "Save Location", "")
  
    # #     # if path is selected
    # #     if path:
  
    # #         # update the path
    # #         self.save_path = path
  
    # #         # update the sequence
    # #         self.save_seq = 0




class VideoThread(QThread):
    changePixmap = pyqtSignal(QImage)
    #streaming_status = pyqtSignal(bool)


    
    def __init__(self,queue_img1):
        super().__init__()
        self.queue_img1 = queue_img1



    def run(self):
        converter = pylon.ImageFormatConverter()

    # converting to opencv bgr format
        #converter.OutputPixelFormat = pylon.PixelType_BGR8packed
        converter.OutputPixelFormat = pylon.PixelType_Mono8
        converter.OutputBitAlignment = pylon.OutputBitAlignment_MsbAligned
            # Configure the camera
        
        #self.camera.StartGrabbing(pylon.GrabStrategy_LatestImageOnly)
      
        # Continuously grab and display frames

        while True:
            t2=0
            t1=time.time()
            img = self.queue_img1.get()
            
            print("test3")

            if (img is not None) and (t1-t2>0.03):  #constrain the fps to 30 
                # Convert the grabbed image to a numpy array
                
                # Create a QImage from the numpy array
                qimg = QImage(img, img.shape[1], img.shape[0], QImage.Format_Grayscale8)#  Format_RGB888)
                # Create a QPixmap from the QImage
                pixmap = QPixmap.fromImage(qimg)
                # Emit the signal to update the label
                self.changePixmap.emit(qimg)
                t2=time.time()
            elif img == None:
                print('streaming stops')
                break
            else: 
                pass


        

        
class MAGCycThread(QThread):  # another thread that change the cyclic field
    field_change_signal = pyqtSignal(int)
    # mag_switch_signal = pyqtSignal()


    def __init__(self,queue_magcyc):
        super().__init__()
        self.queue_magcyc = queue_magcyc
        self.running = True

    def stop(self):
        self.running = False


    def run(self):    

        while not self.queue_magcyc.empty():
            # time.sleep(0.05)
            self.time_info = self.queue_magcyc.get()
        self.T1 = self.time_info[0]
        self.T2 = self.time_info[1]
        self.T3 = self.time_info[2]
        self.cycles = self.time_info[3]
        print('cyclic field start!')
        print('cyclic period: T1 = ',self.T1,', T2 = ', self.T2, ', T3 = ',self.T3, 'total number of cycles: ',self.cycles)
        self.running = True

        for i in range(self.cycles):
            if not self.running:
                break

            print("running cycle ",i)
            for j in range(3):
                if not self.running:
                    break

                if self.time_info[j] >0: 
                    print("running field ",j+1)
                    self.field_change_signal.emit(j)
                    total_sleep_time = self.time_info[j]
                    sleep_interval = 0.1
                    elapsed_time = 0
                    while elapsed_time < total_sleep_time:
                        if not self.running:
                            print("cyclic field stop at cycle ",i)
                            break
                
                        time.sleep(sleep_interval)
                        elapsed_time += sleep_interval
                    print("field ",j+1," finished")






class AWGThread(QThread): #DAQ output thread for magnetic field controll

    

    noDev1 = pyqtSignal()
    Dev1_init = pyqtSignal()
    switch_signal = pyqtSignal(bool)
    awgcom_signal = pyqtSignal()
    
    
    def emit_signal(self):
        print('signal emitted')
        self.noDev1.emit()


    def __init__(self,queue_awgcom,queue_mag,queue_awg2cam):
        super().__init__()
        self.queue_awgcom = queue_awgcom
        self.queue_mag = queue_mag
        self.queue_awg2cam = queue_awg2cam


        self.samples_per_channel = 60
        self.rate = 60
        self.samples_per_period = 60
        self.mag_switch_status = False



        system = nidaqmx.system.System.local()
        devices = system.devices
        print(devices)


        self.Dev1_status = False
        for device in devices:
            print('Device name: ', device.name)
            if device.name == 'Dev1':
                self.Dev1_status = True
            print('Product category: ', device.product_category)
            print('Product type: ', device.product_type)
            #print('Device ID: ', device.device_id)




    def run(self):
        self.switch_signal.connect(self.output_switch)
        self.awgcom_signal.connect(self.update_data)
        if self.Dev1_status:
            print("initialize DAQ")
            self.Dev1_init.emit()

            # Create a task

            self.task_output = nidaqmx.Task("analogoutput")
            #self.task_input = nidaqmx.Task("analoginput")

            # Configure three analog output voltage channels
            self.task_output.ao_channels.add_ao_voltage_chan("Dev1/ao0:2", min_val=-10.0, max_val=10.0)
            # self.task_output.ao_channels.add_ao_voltage_chan("Dev1/ao1", min_val=-10.0, max_val=10.0)
            # self.task_output.ao_channels.add_ao_voltage_chan("Dev1/ao2", min_val=-10.0, max_val=10.0)


            # Configure three analog input differential voltage channels

            #self.task_input.ai_channels.add_ai_voltage_chan("Dev1/ai0",terminal_config=nidaqmx.constants.TerminalConfiguration.DIFF,min_val=-10.0, max_val=10.0)
            #self.task_input.ai_channels.add_ai_voltage_chan("Dev1/ai1",terminal_config=nidaqmx.constants.TerminalConfiguration.DIFF,min_val=-10.0, max_val=10.0)
            #self.task_input.ai_channels.add_ai_voltage_chan("Dev1/ai2",terminal_config=nidaqmx.constants.TerminalConfiguration.DIFF,min_val=-10.0, max_val=10.0)

            # Set the sample rate
            self.task_output.timing.cfg_samp_clk_timing(self.rate,sample_mode=nidaqmx.constants.AcquisitionType.CONTINUOUS, active_edge = nidaqmx.constants.Edge.RISING, samps_per_chan=self.samples_per_channel)
            #self.task_input.timing.cfg_samp_clk_timing(self.rate,source = "/Dev1/ao/SampleClock",sample_mode=nidaqmx.constants.AcquisitionType.CONTINUOUS, active_edge = nidaqmx.constants.Edge.RISING, samps_per_chan=self.samples_per_channel)
            print('daq timing initialized')
            self.amp1 = 0.0
            self.phase1 = 0
            self.freq1 = 1.0
            self.amp2 = 0
            self.phase2 = 0
            self.freq2 = 1
            self.amp3 = 0
            self.freq3 = 1
            self.phase3 = 0
            self.dc1 = 0
            self.dc2 = 0
            self.dc3 = 0
            self.freq = 1


        if not self.Dev1_status:
            print("dev1 not found")
            self.noDev1.emit()
        else:
            self.output_writer = AnalogMultiChannelWriter(self.task_output.out_stream)
            self.update_data()

    def update_data(self):
        time1=time.time()
		# time.sleep(0.05)
        while not self.queue_awgcom.empty():
        	# time.sleep(0.05)
            self.awg_info = self.queue_awgcom.get()
        #self.freq = self.freq1

        self.dc1 = self.awg_info[0]
        self.freq1 = self.awg_info[1]
        self.amp1 = self.awg_info[2]
        self.phase1 = self.awg_info[3]
        self.dc2 = self.awg_info[4]
        self.freq2 = self.awg_info[5]
        self.amp2 = self.awg_info[6]
        self.phase2 = self.awg_info[7]
        self.dc3 = self.awg_info[8]
        self.freq3 = self.awg_info[9]
        self.amp3 = self.awg_info[10]
        self.phase3 = self.awg_info[11]
        self.wave1 = self.awg_info[12]
        self.wave2 = self.awg_info[13]
        self.wave3 = self.awg_info[14]
        self.samples_per_channel = 60
        self.rate = self.samples_per_period*self.freq1
        print('queue received, rate:',self.rate,'samples_per_channel',self.samples_per_channel)
        # self.samples_per_channel = np.floor(1/self.freq1*self.rate)
        #self.task_output.timing.cfg_samp_clk_timing(self.rate,sample_mode=nidaqmx.constants.AcquisitionType.CONTINUOUS, active_edge = nidaqmx.constants.Edge.RISING, samps_per_chan=self.samples_per_channel)

        t1 = np.linspace(0, 2 * np.pi, self.samples_per_channel+1)
        t2 = np.linspace(0, 2 * np.pi, self.samples_per_channel+1)
        t3 = np.linspace(0, 2 * np.pi, self.samples_per_channel+1)
        t1 = t1[:-1]
        t2 = t2[:-1]
        t3 = t3[:-1]
        phase0 = 2*np.pi*self.freq1*time.time()


        if self.wave1 == 0: #sin 
            s1 = self.amp1*np.sin(t1+phase0+self.phase1)+self.dc1

        elif self.wave1 == 2: # triangle
            # s1 = self.triangle_wave(t1+phase0+self.phase1,self.amp1)
            # s1 = s1+self.dc1
            x = (t1+phase0+self.phase1)/2/np.pi
            s1 = (2 * np.abs(2 * (x - np.floor(0.5 + x))) - 1)*self.amp1+self.dc1
        elif self.wave1 == 1:
            s1 = self.amp1 * np.sign(np.sin(t1+phase0+self.phase1))+self.dc1

        if self.wave2 == 0: #sin 
            s2 = self.amp2*np.sin(t2+phase0+self.phase2)+self.dc2
        elif self.wave2 == 2: # triangle
            x = (t2+phase0+self.phase2)/2/np.pi
            s2 = (2 * np.abs(2 * (x - np.floor(0.5 + x))) - 1)*self.amp2+self.dc2
        elif self.wave2 == 1:
            s2 = self.amp2 * np.sign(np.sin(t2+phase0+self.phase2))+self.dc2

        if self.wave3 == 0: #sin 
            s3 = self.amp3*np.sin(t3+phase0+self.phase3)+self.dc3
        elif self.wave3 == 2: # triangle
            x = (t3+phase0+self.phase3)/2/np.pi
            s3 = (2 * np.abs(2 * (x - np.floor(0.5 + x))) - 1)*self.amp3+self.dc3
        elif self.wave3 == 1:
            s3 = self.amp3 * np.sign(np.sin(t3+phase0+self.phase3))+self.dc3



        self.output_data = np.row_stack((s1, s2, s3))

        time2 = time.time()


        self.update_timing_config()
        time3 = time.time()
        
        self.write_data()

        time4 = time.time()
        print('queue receiving:',time2-time1,', reconfig timing:', time3-time2, ', DAQ data writing:',time4-time3)
        

            # self.write_data()

        print('field changed:x: dc:',self.dc1,', ac: ',self.amp1,', freq: ',self.freq1,', phase: ',self.phase1,'\n')
        print('field changed:y: dc:',self.dc2,', ac: ',self.amp2,', freq: ',self.freq2,', phase: ',self.phase2,'\n')
        print('field changed:z: dc:',self.dc3,', ac: ',self.amp3,', freq: ',self.freq3,', phase: ',self.phase3,'\n')

        # write output data
    def update_timing_config(self):
        
        if self.freq != self.freq1:
            print('daq timing reconfig')
            self.freq = self.freq1
            if self.mag_switch_status == True:
                self.task_output.stop()
                self.task_output.timing.cfg_samp_clk_timing(self.rate,sample_mode=nidaqmx.constants.AcquisitionType.CONTINUOUS, active_edge = nidaqmx.constants.Edge.RISING, samps_per_chan=self.samples_per_channel)
                self.task_output.start()
            else:
                self.task_output.timing.cfg_samp_clk_timing(self.rate,sample_mode=nidaqmx.constants.AcquisitionType.CONTINUOUS, active_edge = nidaqmx.constants.Edge.RISING, samps_per_chan=self.samples_per_channel)

    def triangle_wave(phase, amplitude):
        x = phase/2/np.pi
        y = 2 * np.abs(2 * (x - np.floor(0.5 + x))) - 1
        return amplitude * y

    def write_data(self):
        if self.mag_switch_status == True:
            self.task_output.stop()
            self.output_writer.write_many_sample(self.output_data)
            self.task_output.start()
        else:
            self.output_writer.write_many_sample(self.output_data)
        #print(self.output_data)
        #print('data written in daq')
        #task_output.write(output_data)
    
    def output_switch(self,status):
        if status == True:
            self.mag_switch_status = True
            self.task_output.start()
            print('magnets on')
        else: 
            self.task_output.stop()
            self.mag_switch_status = False

	        # # write input data

	        # max_freq = np.maximum(self.freq1,self.freq2,self.freq3)
	        # if max_freq > 0:
	        # 	input_num_samples = 2/max_freq*self.rate

	        # input_reader = nidaqmx.stream_readers.AnalogMultiChannelReader
	        # input_data = np.zeros(1,3)
	        # input_reader.read_one_sample(input_data,timeout = 10)

	        
	        # self.task_input.start()



    def stop(self):
        # Stop the task
        self.task_output.stop()
        # self.task_input.stop()
        self.task_output.close()
        # self.task_input.close()

    def transmit_mag2cam(self):
        #
        pass







class DAQinputThread(QThread):

    #noDev1 = pyqtSignal()


    def __init__(self,queue_awgcom,queue_mag,queue_awg2cam):
        super().__init__()
        self.queue_awgcom = queue_awgcom
        self.queue_mag = queue_mag
        self.queue_awg2cam = queue_awg2cam

                    
        self.samples_per_channel = 1000
        self.rate = 1000.0




        system = nidaqmx.system.System.local()
        devices = system.devices
        print(devices)
        self.Dev1_status = False
        for device in devices:
            print('Device name: ', device.name)
            if device.name == 'Dev1':
                self.Dev1_status = True
            print('Product category: ', device.product_category)
            print('Product type: ', device.product_type)
            #print('Device ID: ', device.device_id)
        if self.Dev1_status:

            # Create a task

            self.task_input = nidaqmx.Task("analoginput")

            # Configure three analog input differential voltage channels
            
            self.task_input.ai_channels.add_ai_voltage_chan("Dev1/ai0",terminal_config=nidaqmx.constants.TerminalConfiguration.DIFF,min_val=-10.0, max_val=10.0)
            self.task_input.ai_channels.add_ai_voltage_chan("Dev1/ai1",terminal_config=nidaqmx.constants.TerminalConfiguration.DIFF,min_val=-10.0, max_val=10.0)
            self.task_input.ai_channels.add_ai_voltage_chan("Dev1/ai2",terminal_config=nidaqmx.constants.TerminalConfiguration.DIFF,min_val=-10.0, max_val=10.0)

            # Set the sample rate
            self.task_input.timing.cfg_samp_clk_timing(self.rate,source = "/Dev1/ao/SampleClock",sample_mode=nidaqmx.constants.AcquisitionType.CONTINUOUS, active_edge = nidaqmx.constants.Edge.RISING, samps_per_chan=self.samples_per_channel)

    def run(self):
	    if self.Dev1_status:
	        
	        input_reader = nidaqmx.stream_readers.AnalogMultiChannelReader
	        input_data = np.zeros(1,3)
	        input_reader.read_one_sample(input_data,timeout = 10)

	        self.task_output.start()
	        self.task_input.start()



    def stop(self):
        # Stop the task
        self.task_output.stop()
        self.task_input.stop()
        self.task_output.close()
        self.task_input.close()

    def transmit_mag2cam(self):
        pass

    def update_mag_out(self):
            signal = QtCore.pyqtSignal(float)



# Start video capture
    
    
    # print(frame_count)
    # print(time_capture,time_puttext,time_show)


class TextDisplayDialog(QDialog):
    def __init__(self):
        super().__init__()
        self.text_display = QTextEdit(self)
        layout = QVBoxLayout()
        layout.addWidget(self.text_display)
        self.setLayout(layout)

    def update_text(self, text):
        self.text_display.append(text)


class FloatLineEdit(QtWidgets.QLineEdit):
    def __init__(self, *args, **kwargs):
        super(FloatLineEdit, self).__init__(*args, **kwargs)
        self.setValidator(QDoubleValidator())

    def value(self):
        try:
            return float(self.text())
        except ValueError:
            return None
    def setValue(self,value):
        self.setText(str(value))



def cleanup(ui):
    print("performing cleanup...")
    try:
        ui.capture_process.terminate()
    except:
        pass




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()





    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()

    atexit.register(cleanup,ui)
    sys.exit(app.exec_())
